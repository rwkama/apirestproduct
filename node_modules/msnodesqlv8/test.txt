start 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (215ms)
    √ non dbo schema use tvp simple test type select test (64ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (1315ms)
    √ employee use tm to get a table value type representing table and create that user table type (145ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3008ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (109ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (169ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (47ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (42ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (52ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (52ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date (54ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (43ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (50ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text (39ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number (39ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (38ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (38ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (44ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (53ms)
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (45ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text (51ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text (38ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (478ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (134ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (588ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2008ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1373ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (471ms)
    √ bulk insert/update/select int column of signed batchSize 10 (463ms)
    √ bulk insert/select varbinary column batchSize 1 (427ms)
    √ bulk insert/select varbinary column batchSize 10 (488ms)
    √ bulk insert/select null column of datetime batchSize 10 (389ms)
    √ bulk insert/select null column of datetime batchSize 1 (428ms)
    √ employee complex json object array bulk operations (1024ms)
    √ employee insert/select with non primary key (684ms)
    √ employee insert - update a single column (740ms)
    √ bulk insert/update/select bit strict column 10 (475ms)
    √ bulk insert/select bit strict column batchSize 1 (485ms)
    √ bulk insert/select bit strict column 10 (381ms)
    √ bulk insert/select datetime column batchSize 1 (492ms)
    √ bulk insert/select datetime column batchSize 10 (484ms)
    √ bulk insert/select int column of signed batchSize 1 (473ms)
    √ bulk insert/select int column of signed batchSize 10 (476ms)
    √ bulk insert/select int column of unsigned batchSize 1 (428ms)
    √ bulk insert/select int column of unsigned batchSize 10 (444ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (532ms)
    √ bulk insert/select bit column batchSize 1 (421ms)
    √ bulk insert/select bit column 10 (501ms)
    √ bulk insert/update/select bit column 10 (421ms)
    √ bulk insert/select decimal column batchSize 1 (529ms)
    √ bulk insert/select decimal column batchSize 10 (417ms)
    √ bulk insert/select/delete decimal column batchSize 10 (439ms)
    √ bulk insert/update/select decimal column batchSize 10 (575ms)
    √ bulk insert/select varchar column batchSize 1 (543ms)
    √ bulk insert/select varchar column batchSize 10 (597ms)
    √ bulk insert/select/delete varchar column batchSize 10 (434ms)
    √ bulk insert/update/select varchar column batchSize 10 (532ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (410ms)
    √ bulk insert simple multi-column object in batches 10 (588ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (82ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (761ms)
    √ call proc that has 2 output string params + return code (57ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2049ms)
    √ call proc that returns length of input string and decribes itself in results (86ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output (60ms)
    √ test asselect on proc (44ms)

  prepared
    √ use prepared to reserve and read multiple rows. (2140ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (210ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1524ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (55ms)
    √ test timezone components of datetimeoffset


  230 passing (53s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (107ms)
    √ non dbo schema use tvp simple test type select test (63ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (980ms)
    √ employee use tm to get a table value type representing table and create that user table type (681ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (45ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (38ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3023ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both (59ms)
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (133ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (56ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (204ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (49ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (48ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (41ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (50ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (42ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date (45ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text (46ms)
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (43ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (44ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number (54ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (40ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number (41ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (43ms)
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (45ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (44ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (43ms)
    √ test 026 - verify functionality of data type 'char', fetch as text (50ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text (38ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text (40ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (39ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (470ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (71ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (605ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4005ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1040ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (537ms)
    √ bulk insert/update/select int column of signed batchSize 10 (496ms)
    √ bulk insert/select varbinary column batchSize 1 (471ms)
    √ bulk insert/select varbinary column batchSize 10 (392ms)
    √ bulk insert/select null column of datetime batchSize 10 (442ms)
    √ bulk insert/select null column of datetime batchSize 1 (499ms)
    √ employee complex json object array bulk operations (960ms)
    √ employee insert/select with non primary key (639ms)
    √ employee insert - update a single column (1088ms)
    √ bulk insert/update/select bit strict column 10 (497ms)
    √ bulk insert/select bit strict column batchSize 1 (409ms)
    √ bulk insert/select bit strict column 10 (499ms)
    √ bulk insert/select datetime column batchSize 1 (561ms)
    √ bulk insert/select datetime column batchSize 10 (526ms)
    √ bulk insert/select int column of signed batchSize 1 (468ms)
    √ bulk insert/select int column of signed batchSize 10 (456ms)
    √ bulk insert/select int column of unsigned batchSize 1 (518ms)
    √ bulk insert/select int column of unsigned batchSize 10 (377ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (551ms)
    √ bulk insert/select bit column batchSize 1 (409ms)
    √ bulk insert/select bit column 10 (518ms)
    √ bulk insert/update/select bit column 10 (422ms)
    √ bulk insert/select decimal column batchSize 1 (485ms)
    √ bulk insert/select decimal column batchSize 10 (490ms)
    √ bulk insert/select/delete decimal column batchSize 10 (390ms)
    √ bulk insert/update/select decimal column batchSize 10 (509ms)
    √ bulk insert/select varchar column batchSize 1 (482ms)
    √ bulk insert/select varchar column batchSize 10 (440ms)
    √ bulk insert/select/delete varchar column batchSize 10 (483ms)
    √ bulk insert/update/select varchar column batchSize 10 (448ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (520ms)
    √ bulk insert simple multi-column object in batches 10 (485ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (43ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (829ms)
    √ call proc that has 2 output string params + return code (58ms)
    √ get proc and call  - should not error
    √ stream call proc no callback (44ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2042ms)
    √ call proc that returns length of input string and decribes itself in results (65ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc (47ms)

  prepared
    √ use prepared to reserve and read multiple rows. (2084ms)
    √ use prepared statement twice with no parameters. (41ms)
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (1150ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (55ms)
    √ test timezone components of datetimeoffset


  230 passing (54s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (108ms)
    √ non dbo schema use tvp simple test type select test (65ms)
    √ use tvp simple test type select test (59ms)
    √ use tvp simple test type insert test (92ms)
    √ use tvp to select from table type complex object Employee type (909ms)
    √ employee use tm to get a table value type representing table and create that user table type (502ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (58ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (56ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3027ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both (47ms)
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (149ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (90ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (217ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (38ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (44ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (64ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date (40ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (53ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text (41ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number (39ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (63ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (50ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (39ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (39ms)
    √ test 020 - verify functionality of data type 'real', fetch as number (44ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (44ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (47ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text (41ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (42ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (47ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text (51ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text (39ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (40ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (740ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (153ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries (88ms)
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation (44ms)
    √ verify metadata is retrieved for udt/geography types (934ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2011ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1223ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (562ms)
    √ bulk insert/update/select int column of signed batchSize 10 (608ms)
    √ bulk insert/select varbinary column batchSize 1 (456ms)
    √ bulk insert/select varbinary column batchSize 10 (389ms)
    √ bulk insert/select null column of datetime batchSize 10 (432ms)
    √ bulk insert/select null column of datetime batchSize 1 (74ms)
    √ employee complex json object array bulk operations (795ms)
    √ employee insert/select with non primary key (589ms)
    √ employee insert - update a single column (829ms)
    √ bulk insert/update/select bit strict column 10 (416ms)
    √ bulk insert/select bit strict column batchSize 1 (559ms)
    √ bulk insert/select bit strict column 10 (410ms)
    √ bulk insert/select datetime column batchSize 1 (485ms)
    √ bulk insert/select datetime column batchSize 10 (512ms)
    √ bulk insert/select int column of signed batchSize 1 (425ms)
    √ bulk insert/select int column of signed batchSize 10 (464ms)
    √ bulk insert/select int column of unsigned batchSize 1 (471ms)
    √ bulk insert/select int column of unsigned batchSize 10 (441ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (460ms)
    √ bulk insert/select bit column batchSize 1 (455ms)
    √ bulk insert/select bit column 10 (563ms)
    √ bulk insert/update/select bit column 10 (884ms)
    √ bulk insert/select decimal column batchSize 1 (597ms)
    √ bulk insert/select decimal column batchSize 10 (532ms)
    √ bulk insert/select/delete decimal column batchSize 10 (449ms)
    √ bulk insert/update/select decimal column batchSize 10 (538ms)
    √ bulk insert/select varchar column batchSize 1 (46ms)
    √ bulk insert/select varchar column batchSize 10 (502ms)
    √ bulk insert/select/delete varchar column batchSize 10 (456ms)
    √ bulk insert/update/select varchar column batchSize 10 (517ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (430ms)
    √ bulk insert simple multi-column object in batches 10 (457ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (58ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (985ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2052ms)
    √ call proc that returns length of input string and decribes itself in results (74ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc (40ms)

  prepared
    √ use prepared to reserve and read multiple rows. (2226ms)
    √ use prepared statement twice with no parameters. (40ms)
    √ use prepared statements to select a row, then delete it over each row. (474ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1248ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (55s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (140ms)
    √ non dbo schema use tvp simple test type select test (65ms)
    √ use tvp simple test type select test (62ms)
    √ use tvp simple test type insert test (83ms)
    √ use tvp to select from table type complex object Employee type (1141ms)
    √ employee use tm to get a table value type representing table and create that user table type (509ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (42ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both (54ms)
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (135ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (111ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (186ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (51ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (43ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (44ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text (40ms)
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (38ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (57ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (38ms)
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (47ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (46ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (45ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (43ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (40ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (520ms)
    √ insert string 60 x 1024 in varchar(max) (44ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error (1059ms)
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (1061ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field (54ms)
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly (48ms)
    √ object_name query  (148ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (512ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2006ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1228ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (582ms)
    √ bulk insert/update/select int column of signed batchSize 10 (485ms)
    √ bulk insert/select varbinary column batchSize 1 (537ms)
    √ bulk insert/select varbinary column batchSize 10 (397ms)
    √ bulk insert/select null column of datetime batchSize 10 (481ms)
    √ bulk insert/select null column of datetime batchSize 1 (479ms)
    √ employee complex json object array bulk operations (1000ms)
    √ employee insert/select with non primary key (674ms)
    √ employee insert - update a single column (752ms)
    √ bulk insert/update/select bit strict column 10 (490ms)
    √ bulk insert/select bit strict column batchSize 1 (474ms)
    √ bulk insert/select bit strict column 10 (454ms)
    √ bulk insert/select datetime column batchSize 1 (466ms)
    √ bulk insert/select datetime column batchSize 10 (541ms)
    √ bulk insert/select int column of signed batchSize 1 (408ms)
    √ bulk insert/select int column of signed batchSize 10 (509ms)
    √ bulk insert/select int column of unsigned batchSize 1 (430ms)
    √ bulk insert/select int column of unsigned batchSize 10 (492ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (421ms)
    √ bulk insert/select bit column batchSize 1 (474ms)
    √ bulk insert/select bit column 10 (465ms)
    √ bulk insert/update/select bit column 10 (469ms)
    √ bulk insert/select decimal column batchSize 1 (433ms)
    √ bulk insert/select decimal column batchSize 10 (518ms)
    √ bulk insert/select/delete decimal column batchSize 10 (459ms)
    √ bulk insert/update/select decimal column batchSize 10 (469ms)
    √ bulk insert/select varchar column batchSize 1 (484ms)
    √ bulk insert/select varchar column batchSize 10 (437ms)
    √ bulk insert/select/delete varchar column batchSize 10 (535ms)
    √ bulk insert/update/select varchar column batchSize 10 (388ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (470ms)
    √ bulk insert simple multi-column object in batches 10 (483ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (50ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (796ms)
    √ call proc that has 2 output string params + return code (53ms)
    √ get proc and call  - should not error
    √ stream call proc no callback (43ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2050ms)
    √ call proc that returns length of input string and decribes itself in results (70ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc (38ms)

  prepared
    √ use prepared to reserve and read multiple rows. (2341ms)
    √ use prepared statement twice with no parameters. (49ms)
    √ use prepared statements to select a row, then delete it over each row. (193ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1213ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (39ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (45ms)
    √ test timezone components of datetimeoffset


  230 passing (56s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (111ms)
    √ non dbo schema use tvp simple test type select test (73ms)
    √ use tvp simple test type select test (60ms)
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (1123ms)
    √ employee use tm to get a table value type representing table and create that user table type (688ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (68ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (125ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (63ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (218ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (45ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (39ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (38ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (43ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (40ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (42ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (40ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (85ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number (38ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (72ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (90ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (45ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (52ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (49ms)
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (42ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (41ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (39ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary (49ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text (51ms)
    √ test 026 - verify functionality of data type 'char', fetch as text (41ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (56ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (50ms)
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (56ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (39ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (680ms)
    √ insert string 60 x 1024 in varchar(max) (40ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error (39ms)
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (159ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (566ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2010ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4014ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1081ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (551ms)
    √ bulk insert/update/select int column of signed batchSize 10 (385ms)
    √ bulk insert/select varbinary column batchSize 1 (467ms)
    √ bulk insert/select varbinary column batchSize 10 (411ms)
    √ bulk insert/select null column of datetime batchSize 10 (439ms)
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (1080ms)
    √ employee insert/select with non primary key (703ms)
    √ employee insert - update a single column (983ms)
    √ bulk insert/update/select bit strict column 10 (395ms)
    √ bulk insert/select bit strict column batchSize 1 (575ms)
    √ bulk insert/select bit strict column 10 (415ms)
    √ bulk insert/select datetime column batchSize 1 (517ms)
    √ bulk insert/select datetime column batchSize 10 (434ms)
    √ bulk insert/select int column of signed batchSize 1 (427ms)
    √ bulk insert/select int column of signed batchSize 10 (494ms)
    √ bulk insert/select int column of unsigned batchSize 1 (444ms)
    √ bulk insert/select int column of unsigned batchSize 10 (485ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (451ms)
    √ bulk insert/select bit column batchSize 1 (450ms)
    √ bulk insert/select bit column 10 (836ms)
    √ bulk insert/update/select bit column 10 (439ms)
    √ bulk insert/select decimal column batchSize 1 (473ms)
    √ bulk insert/select decimal column batchSize 10 (450ms)
    √ bulk insert/select/delete decimal column batchSize 10 (391ms)
    √ bulk insert/update/select decimal column batchSize 10 (517ms)
    √ bulk insert/select varchar column batchSize 1 (501ms)
    √ bulk insert/select varchar column batchSize 10 (624ms)
    √ bulk insert/select/delete varchar column batchSize 10 (77ms)
    √ bulk insert/update/select varchar column batchSize 10 (487ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (440ms)
    √ bulk insert simple multi-column object in batches 10 (528ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (41ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (883ms)
    √ call proc that has 2 output string params + return code (61ms)
    √ get proc and call  - should not error
    √ stream call proc no callback (44ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2059ms)
    √ call proc that returns length of input string and decribes itself in results (102ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output (60ms)
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (2434ms)
    √ use prepared statement twice with no parameters. (45ms)
    √ use prepared statements to select a row, then delete it over each row. (180ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1333ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  230 passing (56s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (126ms)
    √ non dbo schema use tvp simple test type select test (53ms)
    √ use tvp simple test type select test (74ms)
    √ use tvp simple test type insert test (54ms)
    √ use tvp to select from table type complex object Employee type (1069ms)
    √ employee use tm to get a table value type representing table and create that user table type (662ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (66ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (45ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3016ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (133ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (55ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (157ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (40ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (40ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (48ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date (45ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (40ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (46ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (38ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (52ms)
    √ test 020 - verify functionality of data type 'real', fetch as number (42ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (48ms)
    √ test 026 - verify functionality of data type 'char', fetch as text (42ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (45ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (38ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (38ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (49ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (40ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (649ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (108ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (573ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2008ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4025ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (597ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (338ms)
    √ bulk insert/update/select int column of signed batchSize 10 (383ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (383ms)
    √ employee insert/select with non primary key (548ms)
    √ employee insert - update a single column (523ms)
    √ bulk insert/update/select bit strict column 10 (458ms)
    √ bulk insert/select bit strict column batchSize 1 (479ms)
    √ bulk insert/select bit strict column 10 (412ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (478ms)
    √ bulk insert simple multi-column object in batches 10 (330ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (716ms)
    √ call proc that has 2 output string params + return code (59ms)
    √ get proc and call  - should not error (50ms)
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2046ms)
    √ call proc that returns length of input string and decribes itself in results (114ms)
    √ call proc that returns length of input string (50ms)
    √ call proc that has 2 input params + 1 output (46ms)
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (2274ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (186ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1186ms)
    √ use prepared statement twice with different params. (39ms)

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (41s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (123ms)
    √ non dbo schema use tvp simple test type select test (52ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (482ms)
    √ employee use tm to get a table value type representing table and create that user table type (99ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3021ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both (46ms)
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (139ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (81ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit (46ms)
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (134ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (46ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text (41ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (47ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (59ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary (87ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (66ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (40ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (52ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text (51ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text (48ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (525ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (408ms)
    √ insert string 60 x 1024 in varchar(max) (44ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (99ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (417ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2023ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4023ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (673ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (601ms)
    √ bulk insert/update/select int column of signed batchSize 10 (432ms)
    √ bulk insert/select varbinary column batchSize 1 (418ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (514ms)
    √ employee insert/select with non primary key (143ms)
    √ employee insert - update a single column (116ms)
    √ bulk insert/update/select bit strict column 10 (307ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1 (534ms)
    √ bulk insert/select int column of unsigned batchSize 10 (407ms)
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (47ms)
    √ bulk insert/select decimal column batchSize 1 (384ms)
    √ bulk insert/select decimal column batchSize 10 (717ms)
    √ bulk insert/select/delete decimal column batchSize 10 (50ms)
    √ bulk insert/update/select decimal column batchSize 10 (39ms)
    √ bulk insert/select varchar column batchSize 1 (74ms)
    √ bulk insert/select varchar column batchSize 10 (54ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (41ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (51ms)
    √ bulk insert simple multi-column object in batches 10 (568ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (126ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (1040ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback (68ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2056ms)
    √ call proc that returns length of input string and decribes itself in results (78ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (1223ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (45ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (829ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1) (50ms)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (53ms)
    √ test timezone components of datetimeoffset


  230 passing (41s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (140ms)
    √ non dbo schema use tvp simple test type select test (93ms)
    √ use tvp simple test type select test (75ms)
    √ use tvp simple test type insert test (84ms)
    √ use tvp to select from table type complex object Employee type (236ms)
    √ employee use tm to get a table value type representing table and create that user table type (663ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (41ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3006ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (106ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (73ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (232ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (49ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (40ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (612ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (147ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (42ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (226ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (686ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (627ms)
    √ bulk insert/update/select int column of signed batchSize 10 (495ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (1337ms)
    √ employee insert/select with non primary key (955ms)
    √ employee insert - update a single column (1219ms)
    √ bulk insert/update/select bit strict column 10 (593ms)
    √ bulk insert/select bit strict column batchSize 1 (519ms)
    √ bulk insert/select bit strict column 10 (665ms)
    √ bulk insert/select datetime column batchSize 1 (709ms)
    √ bulk insert/select datetime column batchSize 10 (527ms)
    √ bulk insert/select int column of signed batchSize 1 (623ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1 (647ms)
    √ bulk insert/select int column of unsigned batchSize 10 (82ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (507ms)
    √ bulk insert/select bit column batchSize 1 (598ms)
    √ bulk insert/select bit column 10 (583ms)
    √ bulk insert/update/select bit column 10 (612ms)
    √ bulk insert/select decimal column batchSize 1 (665ms)
    √ bulk insert/select decimal column batchSize 10 (617ms)
    √ bulk insert/select/delete decimal column batchSize 10 (542ms)
    √ bulk insert/update/select decimal column batchSize 10 (504ms)
    √ bulk insert/select varchar column batchSize 1 (724ms)
    √ bulk insert/select varchar column batchSize 10 (609ms)
    √ bulk insert/select/delete varchar column batchSize 10 (771ms)
    √ bulk insert/update/select varchar column batchSize 10 (753ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (766ms)
    √ bulk insert simple multi-column object in batches 10 (696ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (70ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (1216ms)
    √ call proc that has 2 output string params + return code (40ms)
    √ get proc and call  - should not error
    √ stream call proc no callback (40ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2044ms)
    √ call proc that returns length of input string and decribes itself in results (59ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (3801ms)
    √ use prepared statement twice with no parameters. (40ms)
    √ use prepared statements to select a row, then delete it over each row. (170ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1670ms)
    √ use prepared statement twice with different params. (45ms)

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification (39ms)
    √ time to millisecond components (65ms)
    √ test timezone components of datetimeoffset


  230 passing (58s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (165ms)
    √ non dbo schema use tvp simple test type select test (79ms)
    √ use tvp simple test type select test (104ms)
    √ use tvp simple test type insert test (141ms)
    √ use tvp to select from table type complex object Employee type (1172ms)
    √ employee use tm to get a table value type representing table and create that user table type (875ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (44ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (65ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (42ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (105ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (59ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests (38ms)
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (238ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (72ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (51ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (44ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (80ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (100ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (54ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text (38ms)
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (38ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (51ms)
    √ test 012 - verify functionality of data type 'int', fetch as number (54ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (84ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (61ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (45ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (38ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (66ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (68ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (42ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (70ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (44ms)
    √ test 026 - verify functionality of data type 'char', fetch as text (107ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (140ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (39ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text (80ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text (38ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (577ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error (40ms)
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (115ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (38ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (646ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (980ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (596ms)
    √ bulk insert/update/select int column of signed batchSize 10 (476ms)
    √ bulk insert/select varbinary column batchSize 1 (450ms)
    √ bulk insert/select varbinary column batchSize 10 (426ms)
    √ bulk insert/select null column of datetime batchSize 10 (410ms)
    √ bulk insert/select null column of datetime batchSize 1 (485ms)
    √ employee complex json object array bulk operations (960ms)
    √ employee insert/select with non primary key (672ms)
    √ employee insert - update a single column (1105ms)
    √ bulk insert/update/select bit strict column 10 (493ms)
    √ bulk insert/select bit strict column batchSize 1 (433ms)
    √ bulk insert/select bit strict column 10 (464ms)
    √ bulk insert/select datetime column batchSize 1 (450ms)
    √ bulk insert/select datetime column batchSize 10 (436ms)
    √ bulk insert/select int column of signed batchSize 1 (479ms)
    √ bulk insert/select int column of signed batchSize 10 (463ms)
    √ bulk insert/select int column of unsigned batchSize 1 (471ms)
    √ bulk insert/select int column of unsigned batchSize 10 (452ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (434ms)
    √ bulk insert/select bit column batchSize 1 (550ms)
    √ bulk insert/select bit column 10 (443ms)
    √ bulk insert/update/select bit column 10 (495ms)
    √ bulk insert/select decimal column batchSize 1 (430ms)
    √ bulk insert/select decimal column batchSize 10 (490ms)
    √ bulk insert/select/delete decimal column batchSize 10 (455ms)
    √ bulk insert/update/select decimal column batchSize 10 (496ms)
    √ bulk insert/select varchar column batchSize 1 (437ms)
    √ bulk insert/select varchar column batchSize 10 (471ms)
    √ bulk insert/select/delete varchar column batchSize 10 (431ms)
    √ bulk insert/update/select varchar column batchSize 10 (466ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (494ms)
    √ bulk insert simple multi-column object in batches 10 (510ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (38ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (825ms)
    √ call proc that has 2 output string params + return code (58ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2048ms)
    √ call proc that returns length of input string and decribes itself in results (96ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    1) use prepared to reserve and read multiple rows.
    √ use prepared statement twice with no parameters. (38ms)
    √ use prepared statements to select a row, then delete it over each row. (144ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1254ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (49ms)
    √ test timezone components of datetimeoffset


  229 passing (1m)
  1 failing

  1) prepared
       use prepared to reserve and read multiple rows.:
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  



1
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (276ms)
    √ non dbo schema use tvp simple test type select test (71ms)
    √ use tvp simple test type select test (53ms)
    √ use tvp simple test type insert test (102ms)
    √ use tvp to select from table type complex object Employee type (1159ms)
    √ employee use tm to get a table value type representing table and create that user table type (631ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (42ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (41ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (109ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (68ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests (55ms)
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit (70ms)
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (453ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (42ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (45ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (56ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (38ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date (43ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (45ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (54ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (60ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (55ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (43ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (40ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (40ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (54ms)
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (38ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text (47ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text (38ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text (39ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (8726ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error (42ms)
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter (44ms)
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter (60ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter (42ms)
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field (55ms)
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time (41ms)
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (359ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (528ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2007ms)
    √ test timeout 0 secs on waitfor delay 4 (4006ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1113ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (579ms)
    √ bulk insert/update/select int column of signed batchSize 10 (506ms)
    √ bulk insert/select varbinary column batchSize 1 (445ms)
    √ bulk insert/select varbinary column batchSize 10 (419ms)
    √ bulk insert/select null column of datetime batchSize 10 (440ms)
    √ bulk insert/select null column of datetime batchSize 1 (452ms)
    √ employee complex json object array bulk operations (1092ms)
    √ employee insert/select with non primary key (581ms)
    √ employee insert - update a single column (1031ms)
    √ bulk insert/update/select bit strict column 10 (494ms)
    √ bulk insert/select bit strict column batchSize 1 (489ms)
    √ bulk insert/select bit strict column 10 (428ms)
    √ bulk insert/select datetime column batchSize 1 (476ms)
    √ bulk insert/select datetime column batchSize 10 (443ms)
    √ bulk insert/select int column of signed batchSize 1 (451ms)
    √ bulk insert/select int column of signed batchSize 10 (466ms)
    √ bulk insert/select int column of unsigned batchSize 1 (436ms)
    √ bulk insert/select int column of unsigned batchSize 10 (488ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (470ms)
    √ bulk insert/select bit column batchSize 1 (464ms)
    √ bulk insert/select bit column 10 (446ms)
    √ bulk insert/update/select bit column 10 (509ms)
    √ bulk insert/select decimal column batchSize 1 (428ms)
    √ bulk insert/select decimal column batchSize 10 (423ms)
    √ bulk insert/select/delete decimal column batchSize 10 (474ms)
    √ bulk insert/update/select decimal column batchSize 10 (463ms)
    √ bulk insert/select varchar column batchSize 1 (480ms)
    √ bulk insert/select varchar column batchSize 10 (738ms)
    √ bulk insert/select/delete varchar column batchSize 10 (930ms)
    √ bulk insert/update/select varchar column batchSize 10 (533ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (477ms)
    √ bulk insert simple multi-column object in batches 10 (555ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (236ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (839ms)
    √ call proc that has 2 output string params + return code (71ms)
    √ get proc and call  - should not error (45ms)
    √ stream call proc no callback (51ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2045ms)
    √ call proc that returns length of input string and decribes itself in results (115ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output (41ms)
    √ test asselect on proc (38ms)

  prepared
    1) use prepared to reserve and read multiple rows.
    2) "after each" hook for "use prepared to reserve and read multiple rows."

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (65ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (111ms)
    √ test timezone components of datetimeoffset


  225 passing (1m)
  2 failing

  1) prepared
       use prepared to reserve and read multiple rows.:
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  

  2) prepared
       "after each" hook for "use prepared to reserve and read multiple rows.":
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  



2
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (311ms)
    √ non dbo schema use tvp simple test type select test (55ms)
    √ use tvp simple test type select test (85ms)
    √ use tvp simple test type insert test (96ms)
    √ use tvp to select from table type complex object Employee type (1044ms)
    √ employee use tm to get a table value type representing table and create that user table type (600ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING (204ms)
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING (68ms)
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (80ms)
    √ check row count emission is as expected for compound queries 1 insert (52ms)
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3005ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (105ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (49ms)
    √ cancel a prepared call that waits (82ms)

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit (46ms)
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (1954ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (45ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (40ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (42ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (41ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text (41ms)
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (41ms)
    √ test 012 - verify functionality of data type 'int', fetch as number (39ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (38ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (38ms)
    √ test 020 - verify functionality of data type 'real', fetch as number (47ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary (41ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (41ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (49ms)
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (46ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (5563ms)
    √ insert string 60 x 1024 in varchar(max) (41ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (143ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var% (44ms)
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (547ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2004ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1300ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (477ms)
    √ bulk insert/update/select int column of signed batchSize 10 (432ms)
    √ bulk insert/select varbinary column batchSize 1 (456ms)
    √ bulk insert/select varbinary column batchSize 10 (650ms)
    √ bulk insert/select null column of datetime batchSize 10 (61ms)
    √ bulk insert/select null column of datetime batchSize 1 (495ms)
    √ employee complex json object array bulk operations (1280ms)
    √ employee insert/select with non primary key (650ms)
    √ employee insert - update a single column (730ms)
    √ bulk insert/update/select bit strict column 10 (532ms)
    √ bulk insert/select bit strict column batchSize 1 (471ms)
    √ bulk insert/select bit strict column 10 (415ms)
    √ bulk insert/select datetime column batchSize 1 (502ms)
    √ bulk insert/select datetime column batchSize 10 (420ms)
    √ bulk insert/select int column of signed batchSize 1 (458ms)
    √ bulk insert/select int column of signed batchSize 10 (503ms)
    √ bulk insert/select int column of unsigned batchSize 1 (462ms)
    √ bulk insert/select int column of unsigned batchSize 10 (444ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (508ms)
    √ bulk insert/select bit column batchSize 1 (455ms)
    √ bulk insert/select bit column 10 (476ms)
    √ bulk insert/update/select bit column 10 (455ms)
    √ bulk insert/select decimal column batchSize 1 (445ms)
    √ bulk insert/select decimal column batchSize 10 (473ms)
    √ bulk insert/select/delete decimal column batchSize 10 (482ms)
    √ bulk insert/update/select decimal column batchSize 10 (451ms)
    √ bulk insert/select varchar column batchSize 1 (489ms)
    √ bulk insert/select varchar column batchSize 10 (463ms)
    √ bulk insert/select/delete varchar column batchSize 10 (438ms)
    √ bulk insert/update/select varchar column batchSize 10 (457ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (513ms)
    √ bulk insert simple multi-column object in batches 10 (534ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (61ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (798ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2047ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    1) use prepared to reserve and read multiple rows.
    2) "after each" hook for "use prepared to reserve and read multiple rows."

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (66ms)
    √ test timezone components of datetimeoffset (70ms)


  225 passing (1m)
  2 failing

  1) prepared
       use prepared to reserve and read multiple rows.:
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  

  2) prepared
       "after each" hook for "use prepared to reserve and read multiple rows.":
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  



2
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (503ms)
    √ non dbo schema use tvp simple test type select test (74ms)
    √ use tvp simple test type select test (82ms)
    √ use tvp simple test type insert test (57ms)
    √ use tvp to select from table type complex object Employee type (1025ms)
    √ employee use tm to get a table value type representing table and create that user table type (668ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (62ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (45ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3005ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (111ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (46ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (1889ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (43ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date (43ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (44ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (42ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (38ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (41ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number (39ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (45ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (39ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (40ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (38ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (40ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (39ms)
    √ test 026 - verify functionality of data type 'char', fetch as text (46ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (40ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (48ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text (43ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (4424ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (40ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter (207ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter (53ms)
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (142ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (469ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4005ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1309ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (515ms)
    √ bulk insert/update/select int column of signed batchSize 10 (439ms)
    √ bulk insert/select varbinary column batchSize 1 (440ms)
    √ bulk insert/select varbinary column batchSize 10 (448ms)
    √ bulk insert/select null column of datetime batchSize 10 (462ms)
    √ bulk insert/select null column of datetime batchSize 1 (501ms)
    √ employee complex json object array bulk operations (910ms)
    √ employee insert/select with non primary key (632ms)
    √ employee insert - update a single column (1049ms)
    √ bulk insert/update/select bit strict column 10 (491ms)
    √ bulk insert/select bit strict column batchSize 1 (473ms)
    √ bulk insert/select bit strict column 10 (404ms)
    √ bulk insert/select datetime column batchSize 1 (508ms)
    √ bulk insert/select datetime column batchSize 10 (435ms)
    √ bulk insert/select int column of signed batchSize 1 (501ms)
    √ bulk insert/select int column of signed batchSize 10 (402ms)
    √ bulk insert/select int column of unsigned batchSize 1 (504ms)
    √ bulk insert/select int column of unsigned batchSize 10 (416ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (499ms)
    √ bulk insert/select bit column batchSize 1 (474ms)
    √ bulk insert/select bit column 10 (449ms)
    √ bulk insert/update/select bit column 10 (421ms)
    √ bulk insert/select decimal column batchSize 1 (510ms)
    √ bulk insert/select decimal column batchSize 10 (441ms)
    √ bulk insert/select/delete decimal column batchSize 10 (497ms)
    √ bulk insert/update/select decimal column batchSize 10 (483ms)
    √ bulk insert/select varchar column batchSize 1 (472ms)
    √ bulk insert/select varchar column batchSize 10 (445ms)
    √ bulk insert/select/delete varchar column batchSize 10 (453ms)
    √ bulk insert/update/select varchar column batchSize 10 (503ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (650ms)
    √ bulk insert simple multi-column object in batches 10 (475ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (85ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (789ms)
    √ call proc that has 2 output string params + return code (56ms)
    √ get proc and call  - should not error
    √ stream call proc no callback (46ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2047ms)
    √ call proc that returns length of input string and decribes itself in results (92ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc (47ms)

  prepared
    1) use prepared to reserve and read multiple rows.
    2) "after each" hook for "use prepared to reserve and read multiple rows."

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (63ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (205ms)
    √ test timezone components of datetimeoffset


  225 passing (1m)
  2 failing

  1) prepared
       use prepared to reserve and read multiple rows.:
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  

  2) prepared
       "after each" hook for "use prepared to reserve and read multiple rows.":
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  



2
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (400ms)
    √ non dbo schema use tvp simple test type select test (90ms)
    √ use tvp simple test type select test (106ms)
    √ use tvp simple test type insert test (120ms)
    √ use tvp to select from table type complex object Employee type (1190ms)
    √ employee use tm to get a table value type representing table and create that user table type (658ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (66ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (44ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3006ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (108ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (71ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (14120ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (48ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text (43ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number (48ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (45ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (41ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (64ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (38ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (43ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary (49ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (45ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (40ms)
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (56ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (279ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (91ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (3756ms)
    √ insert string 60 x 1024 in varchar(max) (97ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error (53ms)
    √ verify Buffer objects as input parameters
    √ insert min and max number values (45ms)
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (63ms)
    √ invalid numbers cause errors
    √ insert string as parameter (63ms)
    √ insert a bool as a parameter (46ms)
    √ insert largest positive int as parameter (49ms)
    √ insert largest negative int as parameter
    √ insert bigint as parameter (45ms)
    √ insert largest bigint as parameter
    √ insert decimal as parameter (47ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error (40ms)
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (153ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (551ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1209ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (638ms)
    √ bulk insert/update/select int column of signed batchSize 10 (505ms)
    √ bulk insert/select varbinary column batchSize 1 (544ms)
    √ bulk insert/select varbinary column batchSize 10 (454ms)
    √ bulk insert/select null column of datetime batchSize 10 (447ms)
    √ bulk insert/select null column of datetime batchSize 1 (481ms)
    √ employee complex json object array bulk operations (936ms)
    √ employee insert/select with non primary key (717ms)
    √ employee insert - update a single column (1274ms)
    √ bulk insert/update/select bit strict column 10 (474ms)
    √ bulk insert/select bit strict column batchSize 1 (491ms)
    √ bulk insert/select bit strict column 10 (392ms)
    √ bulk insert/select datetime column batchSize 1 (480ms)
    √ bulk insert/select datetime column batchSize 10 (462ms)
    √ bulk insert/select int column of signed batchSize 1 (454ms)
    √ bulk insert/select int column of signed batchSize 10 (467ms)
    √ bulk insert/select int column of unsigned batchSize 1 (464ms)
    √ bulk insert/select int column of unsigned batchSize 10 (460ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (458ms)
    √ bulk insert/select bit column batchSize 1 (494ms)
    √ bulk insert/select bit column 10 (444ms)
    √ bulk insert/update/select bit column 10 (531ms)
    √ bulk insert/select decimal column batchSize 1 (430ms)
    √ bulk insert/select decimal column batchSize 10 (446ms)
    √ bulk insert/select/delete decimal column batchSize 10 (446ms)
    √ bulk insert/update/select decimal column batchSize 10 (498ms)
    √ bulk insert/select varchar column batchSize 1 (465ms)
    √ bulk insert/select varchar column batchSize 10 (416ms)
    √ bulk insert/select/delete varchar column batchSize 10 (476ms)
    √ bulk insert/update/select varchar column batchSize 10 (692ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (541ms)
    √ bulk insert simple multi-column object in batches 10 (540ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (44ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (775ms)
    √ call proc that has 2 output string params + return code (38ms)
    √ get proc and call  - should not error (45ms)
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2039ms)
    √ call proc that returns length of input string and decribes itself in results (59ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output (40ms)
    √ test asselect on proc (43ms)

  prepared
    √ use prepared to reserve and read multiple rows. (2389ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (188ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1175ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (60ms)
    √ test timezone components of datetimeoffset


  230 passing (1m)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (214ms)
    √ non dbo schema use tvp simple test type select test (56ms)
    √ use tvp simple test type select test (72ms)
    √ use tvp simple test type insert test (87ms)
    √ use tvp to select from table type complex object Employee type (1104ms)
    √ employee use tm to get a table value type representing table and create that user table type (658ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (41ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (46ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (39ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (114ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (109ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (821ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (40ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (39ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (40ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date (42ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (40ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (53ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (46ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text (46ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (39ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (2236ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (153ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (501ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2007ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (969ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (600ms)
    √ bulk insert/update/select int column of signed batchSize 10 (435ms)
    √ bulk insert/select varbinary column batchSize 1 (459ms)
    √ bulk insert/select varbinary column batchSize 10 (389ms)
    √ bulk insert/select null column of datetime batchSize 10 (443ms)
    √ bulk insert/select null column of datetime batchSize 1 (455ms)
    √ employee complex json object array bulk operations (1071ms)
    √ employee insert/select with non primary key (643ms)
    √ employee insert - update a single column (1074ms)
    √ bulk insert/update/select bit strict column 10 (506ms)
    √ bulk insert/select bit strict column batchSize 1 (438ms)
    √ bulk insert/select bit strict column 10 (419ms)
    √ bulk insert/select datetime column batchSize 1 (526ms)
    √ bulk insert/select datetime column batchSize 10 (414ms)
    √ bulk insert/select int column of signed batchSize 1 (479ms)
    √ bulk insert/select int column of signed batchSize 10 (480ms)
    √ bulk insert/select int column of unsigned batchSize 1 (448ms)
    √ bulk insert/select int column of unsigned batchSize 10 (447ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (493ms)
    √ bulk insert/select bit column batchSize 1 (445ms)
    √ bulk insert/select bit column 10 (488ms)
    √ bulk insert/update/select bit column 10 (499ms)
    √ bulk insert/select decimal column batchSize 1 (472ms)
    √ bulk insert/select decimal column batchSize 10 (429ms)
    √ bulk insert/select/delete decimal column batchSize 10 (437ms)
    √ bulk insert/update/select decimal column batchSize 10 (474ms)
    √ bulk insert/select varchar column batchSize 1 (470ms)
    √ bulk insert/select varchar column batchSize 10 (414ms)
    √ bulk insert/select/delete varchar column batchSize 10 (506ms)
    √ bulk insert/update/select varchar column batchSize 10 (441ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (487ms)
    √ bulk insert simple multi-column object in batches 10 (430ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (46ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (785ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback (44ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2049ms)
    √ call proc that returns length of input string and decribes itself in results (50ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc (39ms)

  prepared
    √ use prepared to reserve and read multiple rows. (3338ms)
    √ use prepared statement twice with no parameters. (47ms)
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (1193ms)
    √ use prepared statement twice with different params. (42ms)

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (51ms)
    √ test timezone components of datetimeoffset


  230 passing (57s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (147ms)
    √ non dbo schema use tvp simple test type select test (76ms)
    √ use tvp simple test type select test (191ms)
    √ use tvp simple test type insert test (71ms)
    √ use tvp to select from table type complex object Employee type (1047ms)
    √ employee use tm to get a table value type representing table and create that user table type (701ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (40ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (38ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (41ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3005ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (108ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (44ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (1452ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (40ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text (39ms)
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (39ms)
    √ test 012 - verify functionality of data type 'int', fetch as number (41ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (49ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (40ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (40ms)
    √ test 020 - verify functionality of data type 'real', fetch as number (44ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (38ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary (38ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (38ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (40ms)
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (43ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (54ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (5263ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error (44ms)
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant (67ms)
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (163ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (77ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation (139ms)
    √ verify metadata is retrieved for udt/geography types (656ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2007ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1305ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (604ms)
    √ bulk insert/update/select int column of signed batchSize 10 (454ms)
    √ bulk insert/select varbinary column batchSize 1 (472ms)
    √ bulk insert/select varbinary column batchSize 10 (430ms)
    √ bulk insert/select null column of datetime batchSize 10 (431ms)
    √ bulk insert/select null column of datetime batchSize 1 (436ms)
    √ employee complex json object array bulk operations (922ms)
    √ employee insert/select with non primary key (709ms)
    √ employee insert - update a single column (724ms)
    √ bulk insert/update/select bit strict column 10 (550ms)
    √ bulk insert/select bit strict column batchSize 1 (473ms)
    √ bulk insert/select bit strict column 10 (459ms)
    √ bulk insert/select datetime column batchSize 1 (427ms)
    √ bulk insert/select datetime column batchSize 10 (439ms)
    √ bulk insert/select int column of signed batchSize 1 (450ms)
    √ bulk insert/select int column of signed batchSize 10 (490ms)
    √ bulk insert/select int column of unsigned batchSize 1 (495ms)
    √ bulk insert/select int column of unsigned batchSize 10 (436ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (480ms)
    √ bulk insert/select bit column batchSize 1 (473ms)
    √ bulk insert/select bit column 10 (461ms)
    √ bulk insert/update/select bit column 10 (461ms)
    √ bulk insert/select decimal column batchSize 1 (459ms)
    √ bulk insert/select decimal column batchSize 10 (431ms)
    √ bulk insert/select/delete decimal column batchSize 10 (454ms)
    √ bulk insert/update/select decimal column batchSize 10 (508ms)
    √ bulk insert/select varchar column batchSize 1 (627ms)
    √ bulk insert/select varchar column batchSize 10 (493ms)
    √ bulk insert/select/delete varchar column batchSize 10 (472ms)
    √ bulk insert/update/select varchar column batchSize 10 (470ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (500ms)
    √ bulk insert simple multi-column object in batches 10 (518ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (230ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (788ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback (38ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2047ms)
    √ call proc that returns length of input string and decribes itself in results (100ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc (40ms)

  prepared
    1) use prepared to reserve and read multiple rows.
    2) "after each" hook for "use prepared to reserve and read multiple rows."

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (65ms)
    √ test timezone components of datetimeoffset


  225 passing (1m)
  2 failing

  1) prepared
       use prepared to reserve and read multiple rows.:
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  

  2) prepared
       "after each" hook for "use prepared to reserve and read multiple rows.":
     Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\prepared.js)
  



2
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (139ms)
    √ non dbo schema use tvp simple test type select test (63ms)
    √ use tvp simple test type select test (76ms)
    √ use tvp simple test type insert test (98ms)
    √ use tvp to select from table type complex object Employee type (1057ms)
    √ employee use tm to get a table value type representing table and create that user table type (660ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (72ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (49ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (52ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (110ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (74ms)
    √ cancel a prepared call that waits (112ms)

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support) (53ms)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (1521ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (75ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (54ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (62ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (40ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (79ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (56ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (80ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date (52ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (61ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text (40ms)
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (92ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text (39ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (63ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number (73ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (111ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (105ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (110ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (57ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (41ms)
    √ test 020 - verify functionality of data type 'real', fetch as number (64ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (69ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (83ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (44ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary (61ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text (53ms)
    √ test 026 - verify functionality of data type 'char', fetch as text (48ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (61ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (52ms)
    √ test 029 - verify functionality of data type 'text', fetch as text (71ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text (54ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (59ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (98ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text (60ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text (56ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (81ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max) (66ms)
    √ insert string 2 x 1024 * 1024 in varchar(max) (6662ms)
    √ insert string 60 x 1024 in varchar(max) (67ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time (45ms)
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly (51ms)
    √ object_name query  (509ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var% (66ms)
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (55ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (947ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4010ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1655ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (788ms)
    √ bulk insert/update/select int column of signed batchSize 10 (735ms)
    √ bulk insert/select varbinary column batchSize 1 (781ms)
    √ bulk insert/select varbinary column batchSize 10 (640ms)
    √ bulk insert/select null column of datetime batchSize 10 (700ms)
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (1396ms)
    √ employee insert/select with non primary key (724ms)
    √ employee insert - update a single column (960ms)
    √ bulk insert/update/select bit strict column 10 (514ms)
    √ bulk insert/select bit strict column batchSize 1 (47ms)
    √ bulk insert/select bit strict column 10 (575ms)
    √ bulk insert/select datetime column batchSize 1 (444ms)
    √ bulk insert/select datetime column batchSize 10 (543ms)
    √ bulk insert/select int column of signed batchSize 1 (480ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1 (430ms)
    √ bulk insert/select int column of unsigned batchSize 10 (479ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (473ms)
    √ bulk insert/select bit column batchSize 1 (488ms)
    √ bulk insert/select bit column 10 (520ms)
    √ bulk insert/update/select bit column 10 (526ms)
    √ bulk insert/select decimal column batchSize 1 (557ms)
    √ bulk insert/select decimal column batchSize 10 (679ms)
    √ bulk insert/select/delete decimal column batchSize 10 (701ms)
    √ bulk insert/update/select decimal column batchSize 10 (733ms)
    √ bulk insert/select varchar column batchSize 1 (720ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10 (594ms)
    √ bulk insert/update/select varchar column batchSize 10 (486ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (541ms)
    √ bulk insert simple multi-column object in batches 10 (649ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (208ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (1007ms)
    √ call proc that has 2 output string params + return code (47ms)
    √ get proc and call  - should not error (51ms)
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2037ms)
    √ call proc that returns length of input string and decribes itself in results (52ms)
    √ call proc that returns length of input string (42ms)
    √ call proc that has 2 input params + 1 output (46ms)
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (3023ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (164ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (2307ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date (53ms)
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (48ms)
    √ test timezone components of datetimeoffset


  230 passing (1m)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (132ms)
    √ non dbo schema use tvp simple test type select test (94ms)
    √ use tvp simple test type select test (64ms)
    √ use tvp simple test type insert test (158ms)
    √ use tvp to select from table type complex object Employee type (1345ms)
    √ employee use tm to get a table value type representing table and create that user table type (1172ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING (116ms)
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING (100ms)
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (124ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all (106ms)
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (119ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (69ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled (38ms)
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (82ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit (54ms)
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error (41ms)
    √ begin a transaction and commit (with no async support) (116ms)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (1487ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (286ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date (152ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (120ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (194ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (219ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (451ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (293ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (204ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (68ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date (624ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (733ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text (210ms)
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (173ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text (119ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (400ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number (138ms)
    √ test 012 - verify functionality of data type 'int', fetch as number (190ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (185ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (174ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (118ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (141ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (68ms)
    √ test 020 - verify functionality of data type 'real', fetch as number (115ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (136ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (147ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (124ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary (91ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text (50ms)
    √ test 026 - verify functionality of data type 'char', fetch as text (123ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (110ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (51ms)
    √ test 029 - verify functionality of data type 'text', fetch as text (1992ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text (2869ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (1575ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (2972ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text (4979ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text (2839ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (494ms)
    √ insert string 500 in nvarchar(1000) (660ms)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000) (521ms)
    √ insert string 30 x 1024 in varchar(max) (700ms)
    1) insert string 2 x 1024 * 1024 in varchar(max)
    √ insert string 60 x 1024 in varchar(max) (258ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter (48ms)
    √ insert a bool as a parameter (46ms)
    √ insert largest positive int as parameter (43ms)
    √ insert largest negative int as parameter
    √ insert bigint as parameter (49ms)
    √ insert largest bigint as parameter
    √ insert decimal as parameter (46ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field (49ms)
    √ insert large string into max column (40ms)
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error (41ms)
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (878ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var% (478ms)
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (353ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation (95ms)
    √ verify metadata is retrieved for udt/geography types (772ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4006ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (4574ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (4306ms)
    √ bulk insert/update/select int column of signed batchSize 10 (4106ms)
    √ bulk insert/select varbinary column batchSize 1 (2679ms)
    √ bulk insert/select varbinary column batchSize 10 (2426ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (2137ms)
    √ employee complex json object array bulk operations (7840ms)
    √ employee insert/select with non primary key (5338ms)
    √ employee insert - update a single column (4983ms)
    √ bulk insert/update/select bit strict column 10 (2711ms)
    √ bulk insert/select bit strict column batchSize 1 (249ms)
    √ bulk insert/select bit strict column 10 (2647ms)
    √ bulk insert/select datetime column batchSize 1 (3124ms)
    √ bulk insert/select datetime column batchSize 10 (1749ms)
    √ bulk insert/select int column of signed batchSize 1 (2918ms)
    √ bulk insert/select int column of signed batchSize 10 (3335ms)
    √ bulk insert/select int column of unsigned batchSize 1 (2216ms)
    √ bulk insert/select int column of unsigned batchSize 10 (542ms)
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1 (2334ms)
    √ bulk insert/select bit column 10 (1870ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (40ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (353ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (40ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (600ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2030ms)
    √ call proc that returns length of input string and decribes itself in results (92ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (2145ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (676ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  229 passing (2m)
  1 failing

  1) params
       insert string 2 x 1024 * 1024 in varchar(max):
     Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\params.js)
  



1
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (91ms)
    √ non dbo schema use tvp simple test type select test (51ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (92ms)
    √ employee use tm to get a table value type representing table and create that user table type (95ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (61ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both (48ms)
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (136ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (52ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests (40ms)
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support) (63ms)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (268ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (79ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (42ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (48ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date (45ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (41ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (42ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number (38ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (41ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (543ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error (76ms)
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (117ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (39ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (777ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2014ms)
    √ test timeout 10 secs on waitfor delay 2 (2017ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1140ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (573ms)
    √ bulk insert/update/select int column of signed batchSize 10 (465ms)
    √ bulk insert/select varbinary column batchSize 1 (917ms)
    √ bulk insert/select varbinary column batchSize 10 (681ms)
    √ bulk insert/select null column of datetime batchSize 10 (486ms)
    √ bulk insert/select null column of datetime batchSize 1 (480ms)
    √ employee complex json object array bulk operations (1011ms)
    √ employee insert/select with non primary key (1059ms)
    √ employee insert - update a single column (620ms)
    √ bulk insert/update/select bit strict column 10 (473ms)
    √ bulk insert/select bit strict column batchSize 1 (503ms)
    √ bulk insert/select bit strict column 10 (458ms)
    √ bulk insert/select datetime column batchSize 1 (438ms)
    √ bulk insert/select datetime column batchSize 10 (476ms)
    √ bulk insert/select int column of signed batchSize 1 (463ms)
    √ bulk insert/select int column of signed batchSize 10 (454ms)
    √ bulk insert/select int column of unsigned batchSize 1 (454ms)
    √ bulk insert/select int column of unsigned batchSize 10 (474ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (442ms)
    √ bulk insert/select bit column batchSize 1 (514ms)
    √ bulk insert/select bit column 10 (415ms)
    √ bulk insert/update/select bit column 10 (471ms)
    √ bulk insert/select decimal column batchSize 1 (466ms)
    √ bulk insert/select decimal column batchSize 10 (456ms)
    √ bulk insert/select/delete decimal column batchSize 10 (454ms)
    √ bulk insert/update/select decimal column batchSize 10 (483ms)
    √ bulk insert/select varchar column batchSize 1 (454ms)
    √ bulk insert/select varchar column batchSize 10 (472ms)
    √ bulk insert/select/delete varchar column batchSize 10 (443ms)
    √ bulk insert/update/select varchar column batchSize 10 (460ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (527ms)
    √ bulk insert simple multi-column object in batches 10 (463ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (48ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (791ms)
    √ call proc that has 2 output string params + return code (59ms)
    √ get proc and call  - should not error
    √ stream call proc no callback (44ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2046ms)
    √ call proc that returns length of input string and decribes itself in results (58ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc (46ms)

  prepared
    √ use prepared to reserve and read multiple rows. (1974ms)
    √ use prepared statement twice with no parameters. (40ms)
    √ use prepared statements to select a row, then delete it over each row. (151ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (1480ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (50ms)
    √ test timezone components of datetimeoffset


  230 passing (54s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (97ms)
    √ non dbo schema use tvp simple test type select test (45ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (1003ms)
    √ employee use tm to get a table value type representing table and create that user table type (691ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (44ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (38ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3013ms)
    √ cancel single waitfor using notifier - expect Operation canceled (39ms)
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (144ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (58ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (300ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (63ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (40ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (50ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (39ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (41ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number (45ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (40ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (48ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (38ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (43ms)
    √ test 026 - verify functionality of data type 'char', fetch as text (43ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (43ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (38ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text (42ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (530ms)
    √ insert string 60 x 1024 in varchar(max) (39ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (120ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (498ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2031ms)
    √ test timeout 0 secs on waitfor delay 4 (4010ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (1273ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (588ms)
    √ bulk insert/update/select int column of signed batchSize 10 (389ms)
    √ bulk insert/select varbinary column batchSize 1 (38ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (442ms)
    √ employee insert/select with non primary key (124ms)
    √ employee insert - update a single column (126ms)
    √ bulk insert/update/select bit strict column 10 (311ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1 (42ms)
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (308ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (748ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2043ms)
    √ call proc that returns length of input string and decribes itself in results (101ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (2167ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (635ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (206ms)
    √ non dbo schema use tvp simple test type select test (127ms)
    √ use tvp simple test type select test (122ms)
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (107ms)
    √ employee use tm to get a table value type representing table and create that user table type (113ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both (47ms)
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (126ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (168ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (369ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (43ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (63ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (175ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2019ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4029ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (394ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (361ms)
    √ bulk insert/update/select int column of signed batchSize 10 (281ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10 (279ms)
    √ bulk insert/select null column of datetime batchSize 1
    1) employee complex json object array bulk operations
error whilst executing msnodelsqlv8 demo - error is Error: [Microsoft][SQL Server Native Client 11.0][SQL Server]Cannot find the object "Employee" because it does not exist or you do not have permissions.
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (182ms)
    √ non dbo schema use tvp simple test type select test (103ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (809ms)
    √ employee use tm to get a table value type representing table and create that user table type (849ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (562ms)
    √ check row count emission is as expected for compound queries 1 insert (71ms)
    √ check row count emission is as expected for compound queries 3 inserts, update all (48ms)
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all (50ms)
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (40ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3013ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (105ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (52ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (208ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (47ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (41ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (110ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (523ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (124ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4013ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (962ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (649ms)
    √ bulk insert/update/select int column of signed batchSize 10 (634ms)
    √ bulk insert/select varbinary column batchSize 1 (58ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (48ms)
    √ employee complex json object array bulk operations (646ms)
    √ employee insert/select with non primary key (161ms)
    √ employee insert - update a single column (147ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1 (512ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (39ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10 (573ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (526ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (46ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (42ms)
    √ bulk insert simple multi-column object in batches 10 (545ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (44ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (859ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error (108ms)
    √ stream call proc no callback (73ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2649ms)
    √ call proc that returns length of input string and decribes itself in results (40ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (927ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (48ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (755ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (51ms)
    √ test timezone components of datetimeoffset


  230 passing (50s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (143ms)
    √ non dbo schema use tvp simple test type select test (65ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (134ms)
    √ employee use tm to get a table value type representing table and create that user table type (148ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3009ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (126ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (64ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (214ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (506ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (113ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (538ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2006ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4005ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (606ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (476ms)
    √ bulk insert/update/select int column of signed batchSize 10 (489ms)
    √ bulk insert/select varbinary column batchSize 1 (444ms)
    √ bulk insert/select varbinary column batchSize 10 (397ms)
    √ bulk insert/select null column of datetime batchSize 10 (414ms)
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (815ms)
    √ employee insert/select with non primary key (158ms)
    √ employee insert - update a single column (113ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (55ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (367ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (52ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (691ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2032ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (739ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (630ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (43ms)
    √ test timezone components of datetimeoffset


  230 passing (39s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (115ms)
    √ non dbo schema use tvp simple test type select test (66ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (108ms)
    √ employee use tm to get a table value type representing table and create that user table type (504ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (44ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (184ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (406ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (63ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (166ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (434ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (391ms)
    √ bulk insert/update/select int column of signed batchSize 10 (364ms)
    √ bulk insert/select varbinary column batchSize 1 (53ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (436ms)
    √ employee insert/select with non primary key (103ms)
    √ employee insert - update a single column (107ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10 (68ms)
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (603ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2038ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (434ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (526ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (42ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (104ms)
    √ non dbo schema use tvp simple test type select test (42ms)
    √ use tvp simple test type select test (41ms)
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (467ms)
    √ employee use tm to get a table value type representing table and create that user table type (119ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3008ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (126ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (164ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (405ms)
    √ insert string 60 x 1024 in varchar(max) (39ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (65ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2017ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (78ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (424ms)
    √ bulk insert/update/select int column of signed batchSize 10 (321ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (397ms)
    √ employee insert/select with non primary key (110ms)
    √ employee insert - update a single column (428ms)
    √ bulk insert/update/select bit strict column 10 (470ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (389ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10 (44ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (351ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (54ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (648ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2036ms)
    √ call proc that returns length of input string and decribes itself in results (58ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (452ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (580ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (99ms)
    √ non dbo schema use tvp simple test type select test (50ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (115ms)
    √ employee use tm to get a table value type representing table and create that user table type (508ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (46ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3015ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (127ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (52ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (168ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (411ms)
    √ insert string 60 x 1024 in varchar(max) (38ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (80ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2004ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (102ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (443ms)
    √ bulk insert/update/select int column of signed batchSize 10 (457ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (518ms)
    √ employee insert/select with non primary key (157ms)
    √ employee insert - update a single column (128ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (424ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (39ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (451ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (646ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (515ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (627ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (84ms)
    √ non dbo schema use tvp simple test type select test (69ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (100ms)
    √ employee use tm to get a table value type representing table and create that user table type (113ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (104ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (144ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (72ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (79ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (87ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (87ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (449ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (99ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (88ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (84ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (1362ms)
    √ test 020 - verify functionality of data type 'real', fetch as number (41ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (40ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (434ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (76ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (79ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (362ms)
    √ bulk insert/update/select int column of signed batchSize 10 (612ms)
    √ bulk insert/select varbinary column batchSize 1 (40ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (379ms)
    √ employee insert/select with non primary key (141ms)
    √ employee insert - update a single column (408ms)
    √ bulk insert/update/select bit strict column 10 (370ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (329ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (297ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (55ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (684ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (484ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (588ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (44ms)
    √ test timezone components of datetimeoffset


  230 passing (39s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (71ms)
    √ non dbo schema use tvp simple test type select test (47ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (443ms)
    √ employee use tm to get a table value type representing table and create that user table type (106ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3005ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (201ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (379ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (52ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (370ms)
    √ bulk insert/update/select int column of signed batchSize 10 (346ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (403ms)
    √ employee insert/select with non primary key (111ms)
    √ employee insert - update a single column (106ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (38ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (733ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2029ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (455ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (577ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (42ms)
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (93ms)
    √ non dbo schema use tvp simple test type select test (62ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (417ms)
    √ employee use tm to get a table value type representing table and create that user table type (142ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (147ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (40ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (412ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (76ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (41ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2011ms)
    √ test timeout 10 secs on waitfor delay 2 (2010ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (84ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (343ms)
    √ bulk insert/update/select int column of signed batchSize 10 (299ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (404ms)
    √ employee insert/select with non primary key (120ms)
    √ employee insert - update a single column (405ms)
    √ bulk insert/update/select bit strict column 10 (305ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10 (327ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (646ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2026ms)
    √ call proc that returns length of input string and decribes itself in results (46ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (433ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (526ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (127ms)
    √ non dbo schema use tvp simple test type select test (38ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (89ms)
    √ employee use tm to get a table value type representing table and create that user table type (127ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (54ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3013ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (130ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (51ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (139ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (42ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (370ms)
    √ insert string 60 x 1024 in varchar(max) (45ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (44ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2014ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (356ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (397ms)
    √ bulk insert/update/select int column of signed batchSize 10 (293ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10 (44ms)
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (410ms)
    √ employee insert/select with non primary key (178ms)
    √ employee insert - update a single column (103ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1 (50ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (75ms)
    √ bulk insert/select decimal column batchSize 1 (38ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (65ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (540ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2041ms)
    √ call proc that returns length of input string and decribes itself in results (78ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (444ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (579ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (65ms)
    √ non dbo schema use tvp simple test type select test (41ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (455ms)
    √ employee use tm to get a table value type representing table and create that user table type (381ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (46ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3007ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (125ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (50ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (131ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000) (38ms)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (377ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1993ms)
    √ test timeout 10 secs on waitfor delay 2 (2010ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (77ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (314ms)
    √ bulk insert/update/select int column of signed batchSize 10 (286ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (419ms)
    √ employee insert/select with non primary key (111ms)
    √ employee insert - update a single column (163ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1 (38ms)
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10 (52ms)
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (39ms)
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (542ms)
    √ call proc that has 2 output string params + return code (46ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (465ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (504ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (42ms)
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (120ms)
    √ non dbo schema use tvp simple test type select test (56ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (86ms)
    √ employee use tm to get a table value type representing table and create that user table type (87ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (160ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (379ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (57ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1997ms)
    √ test timeout 10 secs on waitfor delay 2 (2007ms)
    √ test timeout 0 secs on waitfor delay 4 (4010ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (74ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (332ms)
    √ bulk insert/update/select int column of signed batchSize 10 (334ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (42ms)
    √ employee complex json object array bulk operations (348ms)
    √ employee insert/select with non primary key (381ms)
    √ employee insert - update a single column (135ms)
    √ bulk insert/update/select bit strict column 10 (346ms)
    √ bulk insert/select bit strict column batchSize 1 (55ms)
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (304ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (539ms)
    √ call proc that has 2 output string params + return code (59ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2030ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (444ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (521ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (69ms)
    √ non dbo schema use tvp simple test type select test (42ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (102ms)
    √ employee use tm to get a table value type representing table and create that user table type (386ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (49ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (125ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (164ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (373ms)
    √ insert string 60 x 1024 in varchar(max) (42ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (57ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (78ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (315ms)
    √ bulk insert/update/select int column of signed batchSize 10 (320ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (369ms)
    √ employee insert/select with non primary key (120ms)
    √ employee insert - update a single column (109ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (56ms)
    √ bulk insert/select varchar column batchSize 1 (47ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (589ms)
    √ call proc that has 2 output string params + return code (52ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2035ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (429ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (566ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (33s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (110ms)
    √ non dbo schema use tvp simple test type select test (46ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (374ms)
    √ employee use tm to get a table value type representing table and create that user table type (131ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (44ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3016ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (130ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (152ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (381ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (50ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (59ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (51ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2012ms)
    √ test timeout 10 secs on waitfor delay 2 (2007ms)
    √ test timeout 0 secs on waitfor delay 4 (4006ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (83ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (316ms)
    √ bulk insert/update/select int column of signed batchSize 10 (309ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (369ms)
    √ employee insert/select with non primary key (426ms)
    √ employee insert - update a single column (359ms)
    √ bulk insert/update/select bit strict column 10 (310ms)
    √ bulk insert/select bit strict column batchSize 1 (59ms)
    √ bulk insert/select bit strict column 10 (280ms)
    √ bulk insert/select datetime column batchSize 1 (41ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (38ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (39ms)
    √ bulk insert simple multi-column object in batches 10 (324ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (623ms)
    √ call proc that has 2 output string params + return code (49ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2026ms)
    √ call proc that returns length of input string and decribes itself in results (54ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (449ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (538ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (128ms)
    √ non dbo schema use tvp simple test type select test (50ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (81ms)
    √ employee use tm to get a table value type representing table and create that user table type (92ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (52ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3005ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (131ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (138ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (367ms)
    √ insert string 60 x 1024 in varchar(max) (49ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (47ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1998ms)
    √ test timeout 10 secs on waitfor delay 2 (2009ms)
    √ test timeout 0 secs on waitfor delay 4 (4006ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (84ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (318ms)
    √ bulk insert/update/select int column of signed batchSize 10 (290ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (388ms)
    √ employee insert/select with non primary key (108ms)
    √ employee insert - update a single column (102ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1 (65ms)
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (597ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2025ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (414ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (534ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset (39ms)


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (70ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (83ms)
    √ employee use tm to get a table value type representing table and create that user table type (94ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (50ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3016ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (131ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (135ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (38ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (41ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary (42ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (378ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (60ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (39ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2010ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (69ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (303ms)
    √ bulk insert/update/select int column of signed batchSize 10 (338ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (373ms)
    √ employee insert/select with non primary key (114ms)
    √ employee insert - update a single column (459ms)
    √ bulk insert/update/select bit strict column 10 (309ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (51ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (299ms)
    √ bulk insert/select decimal column batchSize 10 (283ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (61ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (301ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (578ms)
    √ call proc that has 2 output string params + return code (47ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2026ms)
    √ call proc that returns length of input string and decribes itself in results (63ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (445ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (530ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (77ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  230 passing (38s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (95ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (368ms)
    √ employee use tm to get a table value type representing table and create that user table type (109ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (73ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3018ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (52ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (126ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (368ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (56ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (39ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2004ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (336ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (403ms)
    √ bulk insert/update/select int column of signed batchSize 10 (298ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (364ms)
    √ employee insert/select with non primary key (137ms)
    √ employee insert - update a single column (112ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (316ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (51ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (276ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (767ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (51ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (455ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (560ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (71ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (99ms)
    √ employee use tm to get a table value type representing table and create that user table type (378ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3006ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (160ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (379ms)
    √ insert string 60 x 1024 in varchar(max) (38ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (48ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (331ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (311ms)
    √ bulk insert/update/select int column of signed batchSize 10 (313ms)
    √ bulk insert/select varbinary column batchSize 1 (40ms)
    √ bulk insert/select varbinary column batchSize 10 (57ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (370ms)
    √ employee insert/select with non primary key (173ms)
    √ employee insert - update a single column (115ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10 (51ms)
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (39ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (574ms)
    √ call proc that has 2 output string params + return code (50ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results (53ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (427ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (584ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (74ms)
    √ non dbo schema use tvp simple test type select test (43ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (111ms)
    √ employee use tm to get a table value type representing table and create that user table type (86ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (55ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3016ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (131ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (40ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (118ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (44ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (383ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column (40ms)
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (70ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1991ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4014ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (323ms)
    √ bulk insert/update/select int column of signed batchSize 10 (333ms)
    √ bulk insert/select varbinary column batchSize 1 (96ms)
    √ bulk insert/select varbinary column batchSize 10 (53ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (376ms)
    √ employee insert/select with non primary key (119ms)
    √ employee insert - update a single column (96ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (338ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (303ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (57ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (585ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2028ms)
    √ call proc that returns length of input string and decribes itself in results (55ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (437ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (558ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (101ms)
    √ non dbo schema use tvp simple test type select test (39ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (395ms)
    √ employee use tm to get a table value type representing table and create that user table type (380ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (46ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3005ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (51ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (131ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (39ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (375ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (73ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1999ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4010ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (74ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (325ms)
    √ bulk insert/update/select int column of signed batchSize 10 (329ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (371ms)
    √ employee insert/select with non primary key (113ms)
    √ employee insert - update a single column (116ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1 (39ms)
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (601ms)
    √ call proc that has 2 output string params + return code (43ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2026ms)
    √ call proc that returns length of input string and decribes itself in results (84ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (437ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (550ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (33s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (95ms)
    √ non dbo schema use tvp simple test type select test (41ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (102ms)
    √ employee use tm to get a table value type representing table and create that user table type (385ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3010ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (140ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (374ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (43ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (53ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1996ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4013ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (331ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (328ms)
    √ bulk insert/update/select int column of signed batchSize 10 (328ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (363ms)
    √ employee insert/select with non primary key (169ms)
    √ employee insert - update a single column (400ms)
    √ bulk insert/update/select bit strict column 10 (311ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (300ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (676ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2040ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (471ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (502ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (100ms)
    √ non dbo schema use tvp simple test type select test (41ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (112ms)
    √ employee use tm to get a table value type representing table and create that user table type (91ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (47ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (131ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (132ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (38ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (373ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2006ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (84ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (354ms)
    √ bulk insert/update/select int column of signed batchSize 10 (299ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (348ms)
    √ employee insert/select with non primary key (107ms)
    √ employee insert - update a single column (145ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (535ms)
    √ call proc that has 2 output string params + return code (58ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2030ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (414ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (555ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (32s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (99ms)
    √ non dbo schema use tvp simple test type select test (68ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (369ms)
    √ employee use tm to get a table value type representing table and create that user table type (441ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (50ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3008ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (128ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (40ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (371ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (64ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4007ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (75ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (306ms)
    √ bulk insert/update/select int column of signed batchSize 10 (318ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (373ms)
    √ employee insert/select with non primary key (114ms)
    √ employee insert - update a single column (385ms)
    √ bulk insert/update/select bit strict column 10 (281ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (276ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (63ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (39ms)
    √ bulk insert simple multi-column object in batches 10 (310ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (545ms)
    √ call proc that has 2 output string params + return code (47ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2029ms)
    √ call proc that returns length of input string and decribes itself in results (80ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (437ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (551ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (97ms)
    √ non dbo schema use tvp simple test type select test (43ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (82ms)
    √ employee use tm to get a table value type representing table and create that user table type (89ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (52ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (51ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (122ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (39ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (367ms)
    √ insert string 60 x 1024 in varchar(max) (46ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (60ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (49ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (344ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (352ms)
    √ bulk insert/update/select int column of signed batchSize 10 (304ms)
    √ bulk insert/select varbinary column batchSize 1 (42ms)
    √ bulk insert/select varbinary column batchSize 10 (49ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (386ms)
    √ employee insert/select with non primary key (139ms)
    √ employee insert - update a single column (404ms)
    √ bulk insert/update/select bit strict column 10 (312ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (299ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (562ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2030ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (438ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (39ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (549ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (38ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (42ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (100ms)
    √ non dbo schema use tvp simple test type select test (41ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (101ms)
    √ employee use tm to get a table value type representing table and create that user table type (388ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3017ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (163ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (375ms)
    √ insert string 60 x 1024 in varchar(max) (45ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (57ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (48ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4011ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (351ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (317ms)
    √ bulk insert/update/select int column of signed batchSize 10 (315ms)
    √ bulk insert/select varbinary column batchSize 1 (39ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (372ms)
    √ employee insert/select with non primary key (121ms)
    √ employee insert - update a single column (102ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10 (48ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (291ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10 (311ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (589ms)
    √ call proc that has 2 output string params + return code (49ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2029ms)
    √ call proc that returns length of input string and decribes itself in results (52ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (472ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (566ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (125ms)
    √ non dbo schema use tvp simple test type select test (42ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (375ms)
    √ employee use tm to get a table value type representing table and create that user table type (101ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (160ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (364ms)
    √ insert string 60 x 1024 in varchar(max) (38ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (38ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4018ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (77ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (311ms)
    √ bulk insert/update/select int column of signed batchSize 10 (290ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (402ms)
    √ employee insert/select with non primary key (112ms)
    √ employee insert - update a single column (468ms)
    √ bulk insert/update/select bit strict column 10 (319ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10 (47ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (345ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (38ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (306ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (583ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2039ms)
    √ call proc that returns length of input string and decribes itself in results (91ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (444ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (566ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (132ms)
    √ non dbo schema use tvp simple test type select test (52ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (80ms)
    √ employee use tm to get a table value type representing table and create that user table type (411ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3007ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (50ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (129ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (379ms)
    √ insert string 60 x 1024 in varchar(max) (40ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (60ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2004ms)
    √ test timeout 10 secs on waitfor delay 2 (2010ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (318ms)
    √ bulk insert/update/select int column of signed batchSize 10 (333ms)
    √ bulk insert/select varbinary column batchSize 1 (63ms)
    √ bulk insert/select varbinary column batchSize 10 (47ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (343ms)
    √ employee insert/select with non primary key (145ms)
    √ employee insert - update a single column (108ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (559ms)
    √ call proc that has 2 output string params + return code (47ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2022ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (427ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (546ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (117ms)
    √ non dbo schema use tvp simple test type select test (41ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (386ms)
    √ employee use tm to get a table value type representing table and create that user table type (100ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (170ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (39ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (374ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (38ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (53ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1991ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (342ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (320ms)
    √ bulk insert/update/select int column of signed batchSize 10 (306ms)
    √ bulk insert/select varbinary column batchSize 1 (38ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (371ms)
    √ employee insert/select with non primary key (117ms)
    √ employee insert - update a single column (401ms)
    √ bulk insert/update/select bit strict column 10 (307ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (304ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (55ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (622ms)
    √ call proc that has 2 output string params + return code (86ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2027ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (425ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (607ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (69ms)
    √ non dbo schema use tvp simple test type select test (43ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (407ms)
    √ employee use tm to get a table value type representing table and create that user table type (92ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (48ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (143ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (370ms)
    √ insert string 60 x 1024 in varchar(max) (41ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (57ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1990ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4009ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (81ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (313ms)
    √ bulk insert/update/select int column of signed batchSize 10 (355ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (360ms)
    √ employee insert/select with non primary key (105ms)
    √ employee insert - update a single column (102ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (565ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (428ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (546ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (39ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (33s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (111ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (366ms)
    √ employee use tm to get a table value type representing table and create that user table type (109ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3007ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (131ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (51ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (127ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (387ms)
    √ insert string 60 x 1024 in varchar(max) (38ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (51ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (59ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (38ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1997ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4017ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (302ms)
    √ bulk insert/update/select int column of signed batchSize 10 (338ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (384ms)
    √ employee insert/select with non primary key (109ms)
    √ employee insert - update a single column (388ms)
    √ bulk insert/update/select bit strict column 10 (331ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (39ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10 (303ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (583ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2033ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (443ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (570ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (33s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (91ms)
    √ non dbo schema use tvp simple test type select test (41ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (96ms)
    √ employee use tm to get a table value type representing table and create that user table type (96ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3014ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (127ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (131ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (38ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (370ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (44ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2011ms)
    √ test timeout 10 secs on waitfor delay 2 (2009ms)
    √ test timeout 0 secs on waitfor delay 4 (4005ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (338ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (287ms)
    √ bulk insert/update/select int column of signed batchSize 10 (334ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (384ms)
    √ employee insert/select with non primary key (425ms)
    √ employee insert - update a single column (112ms)
    √ bulk insert/update/select bit strict column 10 (307ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10 (302ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (57ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (609ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2042ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (452ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (543ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (42ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (74ms)
    √ non dbo schema use tvp simple test type select test (44ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (383ms)
    √ employee use tm to get a table value type representing table and create that user table type (408ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (131ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests (53ms)
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit (42ms)
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (138ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (47ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (374ms)
    √ insert string 60 x 1024 in varchar(max) (41ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1999ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4009ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (76ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (337ms)
    √ bulk insert/update/select int column of signed batchSize 10 (319ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (361ms)
    √ employee insert/select with non primary key (111ms)
    √ employee insert - update a single column (136ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (285ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (300ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (597ms)
    √ call proc that has 2 output string params + return code (50ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (422ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (539ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (74ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (114ms)
    √ employee use tm to get a table value type representing table and create that user table type (88ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3018ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (125ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (151ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (39ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (39ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (387ms)
    √ insert string 60 x 1024 in varchar(max) (43ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field (46ms)
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (75ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (48ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2011ms)
    √ test timeout 10 secs on waitfor delay 2 (2013ms)
    √ test timeout 0 secs on waitfor delay 4 (4018ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (81ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (289ms)
    √ bulk insert/update/select int column of signed batchSize 10 (322ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (379ms)
    √ employee insert/select with non primary key (400ms)
    √ employee insert - update a single column (110ms)
    √ bulk insert/update/select bit strict column 10 (305ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (38ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (60ms)
    √ bulk insert simple multi-column object in batches 10 (303ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (603ms)
    √ call proc that has 2 output string params + return code (60ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results (74ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (449ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (571ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (93ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (96ms)
    √ employee use tm to get a table value type representing table and create that user table type (380ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (48ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3012ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (131ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (137ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (362ms)
    √ insert string 60 x 1024 in varchar(max) (44ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (66ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1999ms)
    √ test timeout 10 secs on waitfor delay 2 (2019ms)
    √ test timeout 0 secs on waitfor delay 4 (4018ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (73ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (305ms)
    √ bulk insert/update/select int column of signed batchSize 10 (344ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (372ms)
    √ employee insert/select with non primary key (161ms)
    √ employee insert - update a single column (104ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (281ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10 (43ms)
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (307ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (54ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (573ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (439ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (548ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (43ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (76ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (372ms)
    √ employee use tm to get a table value type representing table and create that user table type (125ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (53ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3007ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (52ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (147ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (363ms)
    √ insert string 60 x 1024 in varchar(max) (41ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1989ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (79ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (312ms)
    √ bulk insert/update/select int column of signed batchSize 10 (313ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (53ms)
    √ employee complex json object array bulk operations (398ms)
    √ employee insert/select with non primary key (137ms)
    √ employee insert - update a single column (376ms)
    √ bulk insert/update/select bit strict column 10 (299ms)
    √ bulk insert/select bit strict column batchSize 1 (53ms)
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (303ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (730ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2028ms)
    √ call proc that returns length of input string and decribes itself in results (79ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (561ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (536ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (38s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (109ms)
    √ non dbo schema use tvp simple test type select test (51ms)
    √ use tvp simple test type select test (77ms)
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (94ms)
    √ employee use tm to get a table value type representing table and create that user table type (103ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (47ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3011ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (150ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (45ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (380ms)
    √ insert string 60 x 1024 in varchar(max) (39ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (52ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (59ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1997ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4017ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (327ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (357ms)
    √ bulk insert/update/select int column of signed batchSize 10 (302ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (408ms)
    √ employee insert/select with non primary key (112ms)
    √ employee insert - update a single column (108ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (316ms)
    √ bulk insert/select decimal column batchSize 10 (316ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (300ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (56ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (551ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2038ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (444ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (534ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (100ms)
    √ non dbo schema use tvp simple test type select test (41ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (84ms)
    √ employee use tm to get a table value type representing table and create that user table type (87ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (49ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (109ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (126ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (385ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (60ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2010ms)
    √ test timeout 0 secs on waitfor delay 4 (4009ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (74ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (315ms)
    √ bulk insert/update/select int column of signed batchSize 10 (341ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (372ms)
    √ employee insert/select with non primary key (114ms)
    √ employee insert - update a single column (367ms)
    √ bulk insert/update/select bit strict column 10 (325ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (64ms)
    √ bulk insert simple multi-column object in batches 10 (316ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (579ms)
    √ call proc that has 2 output string params + return code (50ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2033ms)
    √ call proc that returns length of input string and decribes itself in results (53ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (504ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (552ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (32s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (67ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (393ms)
    √ employee use tm to get a table value type representing table and create that user table type (99ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3010ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (51ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (126ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (384ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (89ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (54ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2018ms)
    √ test timeout 10 secs on waitfor delay 2 (2010ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (327ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (336ms)
    √ bulk insert/update/select int column of signed batchSize 10 (334ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (376ms)
    √ employee insert/select with non primary key (112ms)
    √ employee insert - update a single column (106ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (327ms)
    √ bulk insert/select/delete decimal column batchSize 10 (47ms)
    √ bulk insert/update/select decimal column batchSize 10 (57ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (300ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (539ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (421ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (507ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (69ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (113ms)
    √ employee use tm to get a table value type representing table and create that user table type (379ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (130ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (51ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (187ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (644ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (337ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (39ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (358ms)
    √ insert string 60 x 1024 in varchar(max) (42ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (56ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (48ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4007ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (71ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (308ms)
    √ bulk insert/update/select int column of signed batchSize 10 (302ms)
    √ bulk insert/select varbinary column batchSize 1 (56ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (396ms)
    √ employee insert/select with non primary key (103ms)
    √ employee insert - update a single column (97ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (53ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (582ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2034ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (421ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (579ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (47ms)
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (95ms)
    √ non dbo schema use tvp simple test type select test (42ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (87ms)
    √ employee use tm to get a table value type representing table and create that user table type (384ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3008ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (124ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (162ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (41ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (48ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (371ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (81ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (64ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1997ms)
    √ test timeout 10 secs on waitfor delay 2 (2016ms)
    √ test timeout 0 secs on waitfor delay 4 (4014ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (308ms)
    √ bulk insert/update/select int column of signed batchSize 10 (295ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (377ms)
    √ employee insert/select with non primary key (113ms)
    √ employee insert - update a single column (112ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (602ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback (54ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2033ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (449ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (535ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (92ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (397ms)
    √ employee use tm to get a table value type representing table and create that user table type (386ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (49ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3012ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (132ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (376ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (60ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2016ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4006ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (77ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (293ms)
    √ bulk insert/update/select int column of signed batchSize 10 (423ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (334ms)
    √ employee insert/select with non primary key (130ms)
    √ employee insert - update a single column (105ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (284ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (50ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (305ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (43ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (555ms)
    √ call proc that has 2 output string params + return code (52ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (415ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (590ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (79ms)
    √ non dbo schema use tvp simple test type select test (43ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test (70ms)
    √ use tvp to select from table type complex object Employee type (86ms)
    √ employee use tm to get a table value type representing table and create that user table type (459ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3018ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (127ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (161ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (385ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (55ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2008ms)
    √ test timeout 0 secs on waitfor delay 4 (4005ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (80ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (321ms)
    √ bulk insert/update/select int column of signed batchSize 10 (295ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (373ms)
    √ employee insert/select with non primary key (111ms)
    √ employee insert - update a single column (372ms)
    √ bulk insert/update/select bit strict column 10 (278ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (61ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (272ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (585ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2027ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (417ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (540ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification (41ms)
    √ time to millisecond components (42ms)
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (67ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (88ms)
    √ employee use tm to get a table value type representing table and create that user table type (96ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (52ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (141ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (38ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (364ms)
    √ insert string 60 x 1024 in varchar(max) (45ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded (38ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2013ms)
    √ test timeout 0 secs on waitfor delay 4 (4006ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (330ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (309ms)
    √ bulk insert/update/select int column of signed batchSize 10 (301ms)
    √ bulk insert/select varbinary column batchSize 1 (74ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (370ms)
    √ employee insert/select with non primary key (110ms)
    √ employee insert - update a single column (437ms)
    √ bulk insert/update/select bit strict column 10 (278ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (307ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10 (301ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (62ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (566ms)
    √ call proc that has 2 output string params + return code (38ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2034ms)
    √ call proc that returns length of input string and decribes itself in results (71ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (433ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (481ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (39ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (38s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (145ms)
    √ non dbo schema use tvp simple test type select test (59ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (378ms)
    √ employee use tm to get a table value type representing table and create that user table type (124ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3017ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (154ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (40ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (45ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (375ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (62ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1996ms)
    √ test timeout 10 secs on waitfor delay 2 (2015ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (76ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (321ms)
    √ bulk insert/update/select int column of signed batchSize 10 (330ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (339ms)
    √ employee insert/select with non primary key (112ms)
    √ employee insert - update a single column (418ms)
    √ bulk insert/update/select bit strict column 10 (283ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (40ms)
    √ bulk insert simple multi-column object in batches 10 (308ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (607ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2033ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (477ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (541ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (63ms)
    √ non dbo schema use tvp simple test type select test (39ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (93ms)
    √ employee use tm to get a table value type representing table and create that user table type (101ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3012ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (123ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (366ms)
    √ insert string 60 x 1024 in varchar(max) (43ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter (101ms)
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (68ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1996ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4017ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (335ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (353ms)
    √ bulk insert/update/select int column of signed batchSize 10 (312ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (387ms)
    √ employee insert/select with non primary key (109ms)
    √ employee insert - update a single column (427ms)
    √ bulk insert/update/select bit strict column 10 (338ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (53ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (307ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (548ms)
    √ call proc that has 2 output string params + return code (75ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2026ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (428ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (525ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (116ms)
    √ non dbo schema use tvp simple test type select test (42ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (101ms)
    √ employee use tm to get a table value type representing table and create that user table type (368ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3010ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (141ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (38ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (377ms)
    √ insert string 60 x 1024 in varchar(max) (41ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (56ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (48ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1998ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4018ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (319ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (359ms)
    √ bulk insert/update/select int column of signed batchSize 10 (301ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (364ms)
    √ employee insert/select with non primary key (137ms)
    √ employee insert - update a single column (112ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (285ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (44ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (39ms)
    √ bulk insert simple multi-column object in batches 10 (279ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (628ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2033ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (438ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (504ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (42ms)
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (96ms)
    √ non dbo schema use tvp simple test type select test (49ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (390ms)
    √ employee use tm to get a table value type representing table and create that user table type (102ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (130ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (173ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (39ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (364ms)
    √ insert string 60 x 1024 in varchar(max) (44ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (56ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1998ms)
    √ test timeout 10 secs on waitfor delay 2 (2010ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (331ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (375ms)
    √ bulk insert/update/select int column of signed batchSize 10 (291ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (369ms)
    √ employee insert/select with non primary key (123ms)
    √ employee insert - update a single column (119ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (59ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (599ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2023ms)
    √ call proc that returns length of input string and decribes itself in results (53ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (432ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (586ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (42ms)
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (171ms)
    √ non dbo schema use tvp simple test type select test (47ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (96ms)
    √ employee use tm to get a table value type representing table and create that user table type (383ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (49ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (122ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (52ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (133ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (369ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column (40ms)
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (58ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2008ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (81ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (306ms)
    √ bulk insert/update/select int column of signed batchSize 10 (333ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (66ms)
    √ employee complex json object array bulk operations (383ms)
    √ employee insert/select with non primary key (121ms)
    √ employee insert - update a single column (106ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (559ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2033ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (433ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (517ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (33s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (92ms)
    √ non dbo schema use tvp simple test type select test (39ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (406ms)
    √ employee use tm to get a table value type representing table and create that user table type (116ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (52ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3018ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (132ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (52ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (163ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (41ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (369ms)
    √ insert string 60 x 1024 in varchar(max) (38ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (57ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2018ms)
    √ test timeout 0 secs on waitfor delay 4 (4018ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (73ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (312ms)
    √ bulk insert/update/select int column of signed batchSize 10 (295ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (394ms)
    √ employee insert/select with non primary key (110ms)
    √ employee insert - update a single column (406ms)
    √ bulk insert/update/select bit strict column 10 (364ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (63ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (298ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (589ms)
    √ call proc that has 2 output string params + return code (50ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (419ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (526ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset (38ms)


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (76ms)
    √ non dbo schema use tvp simple test type select test (39ms)
    √ use tvp simple test type select test (271ms)
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (473ms)
    √ employee use tm to get a table value type representing table and create that user table type (142ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3005ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (124ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (41ms)
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (377ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (59ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2005ms)
    √ test timeout 10 secs on waitfor delay 2 (2017ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (340ms)
    √ bulk insert/update/select int column of signed batchSize 10 (317ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (390ms)
    √ employee insert/select with non primary key (397ms)
    √ employee insert - update a single column (108ms)
    √ bulk insert/update/select bit strict column 10 (305ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (285ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1 (45ms)
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (58ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (307ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (595ms)
    √ call proc that has 2 output string params + return code (52ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2025ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (410ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (575ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (70ms)
    √ non dbo schema use tvp simple test type select test (53ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (82ms)
    √ employee use tm to get a table value type representing table and create that user table type (89ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (48ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    1) cancel single waitfor on non polling query - expect cancel error and query to complete
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both (74ms)
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (113ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid (45ms)
    √ cancel a call to proc that waits for delay of input param. (95ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (214ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (43ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (41ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number (42ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary (49ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (101ms)
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (82ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (875ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters (38ms)
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter (68ms)
    √ insert decimal as parameter (55ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (106ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2018ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4005ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (79ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (309ms)
    √ bulk insert/update/select int column of signed batchSize 10 (304ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (374ms)
    √ employee insert/select with non primary key (113ms)
    √ employee insert - update a single column (384ms)
    √ bulk insert/update/select bit strict column 10 (343ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (280ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (561ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2028ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (398ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (508ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  229 passing (33m)
  1 failing

  1) querycancel
       cancel single waitfor on non polling query - expect cancel error and query to complete:
     Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\unit.tests\querycancel.js)
  



1
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (215ms)
    √ non dbo schema use tvp simple test type select test (53ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test (38ms)
    √ use tvp to select from table type complex object Employee type (160ms)
    √ employee use tm to get a table value type representing table and create that user table type (148ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3013ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (118ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (171ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (379ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (64ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (49ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1991ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (357ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (321ms)
    √ bulk insert/update/select int column of signed batchSize 10 (286ms)
    √ bulk insert/select varbinary column batchSize 1 (62ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10 (48ms)
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (393ms)
    √ employee insert/select with non primary key (416ms)
    √ employee insert - update a single column (108ms)
    √ bulk insert/update/select bit strict column 10 (310ms)
    √ bulk insert/select bit strict column batchSize 1 (59ms)
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (285ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (307ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (581ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2033ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (464ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (600ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (76ms)
    √ non dbo schema use tvp simple test type select test (47ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (382ms)
    √ employee use tm to get a table value type representing table and create that user table type (399ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (130ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (167ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (483ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (90ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2007ms)
    √ test timeout 10 secs on waitfor delay 2 (2010ms)
    √ test timeout 0 secs on waitfor delay 4 (4008ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (334ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (330ms)
    √ bulk insert/update/select int column of signed batchSize 10 (305ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10 (60ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (374ms)
    √ employee insert/select with non primary key (118ms)
    √ employee insert - update a single column (110ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10 (48ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (540ms)
    √ call proc that has 2 output string params + return code (41ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2028ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (429ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (529ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (38ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (123ms)
    √ non dbo schema use tvp simple test type select test (41ms)
    √ use tvp simple test type select test (47ms)
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (86ms)
    √ employee use tm to get a table value type representing table and create that user table type (95ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (56ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3012ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (130ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (141ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (40ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary (38ms)
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (373ms)
    √ insert string 60 x 1024 in varchar(max) (39ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column (54ms)
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (57ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (48ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1995ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4019ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (320ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (345ms)
    √ bulk insert/update/select int column of signed batchSize 10 (331ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (370ms)
    √ employee insert/select with non primary key (106ms)
    √ employee insert - update a single column (105ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (42ms)
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (684ms)
    √ call proc that has 2 output string params + return code (47ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2023ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (447ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (601ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (100ms)
    √ non dbo schema use tvp simple test type select test (52ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (83ms)
    √ employee use tm to get a table value type representing table and create that user table type (379ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (50ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3005ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (129ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (125ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (384ms)
    √ insert string 60 x 1024 in varchar(max) (40ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (54ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2007ms)
    √ test timeout 0 secs on waitfor delay 4 (4013ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (351ms)
    √ bulk insert/update/select int column of signed batchSize 10 (311ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (60ms)
    √ employee complex json object array bulk operations (399ms)
    √ employee insert/select with non primary key (115ms)
    √ employee insert - update a single column (150ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (321ms)
    √ bulk insert/select/delete decimal column batchSize 10 (64ms)
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (322ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (38ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (600ms)
    √ call proc that has 2 output string params + return code (52ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2038ms)
    √ call proc that returns length of input string and decribes itself in results (48ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (450ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (480ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  230 passing (36s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (88ms)
    √ non dbo schema use tvp simple test type select test (40ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (388ms)
    √ employee use tm to get a table value type representing table and create that user table type (151ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (141ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (393ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (46ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (95ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2014ms)
    √ test timeout 10 secs on waitfor delay 2 (2014ms)
    √ test timeout 0 secs on waitfor delay 4 (4007ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (76ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (409ms)
    √ bulk insert/update/select int column of signed batchSize 10 (302ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (402ms)
    √ employee insert/select with non primary key (110ms)
    √ employee insert - update a single column (677ms)
    √ bulk insert/update/select bit strict column 10 (310ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (305ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (300ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (593ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2023ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (427ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (618ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (33s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (68ms)
    √ non dbo schema use tvp simple test type select test (45ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (85ms)
    √ employee use tm to get a table value type representing table and create that user table type (123ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (41ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3015ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (128ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (44ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (142ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (38ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (428ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (68ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (99ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (402ms)
    √ bulk insert/update/select int column of signed batchSize 10 (374ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (477ms)
    √ employee insert/select with non primary key (105ms)
    √ employee insert - update a single column (119ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (344ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (38ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (394ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (693ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2028ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (466ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (609ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (84ms)
    √ non dbo schema use tvp simple test type select test (55ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (102ms)
    √ employee use tm to get a table value type representing table and create that user table type (130ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3015ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (126ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (190ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (411ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (85ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1996ms)
    √ test timeout 10 secs on waitfor delay 2 (2011ms)
    √ test timeout 0 secs on waitfor delay 4 (4014ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (78ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (405ms)
    √ bulk insert/update/select int column of signed batchSize 10 (386ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (374ms)
    √ employee insert/select with non primary key (116ms)
    √ employee insert - update a single column (402ms)
    √ bulk insert/update/select bit strict column 10 (350ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (389ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (655ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (457ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (618ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (82ms)
    √ non dbo schema use tvp simple test type select test (50ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (461ms)
    √ employee use tm to get a table value type representing table and create that user table type (500ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (56ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (125ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (46ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (180ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (382ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (66ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2012ms)
    √ test timeout 10 secs on waitfor delay 2 (2013ms)
    √ test timeout 0 secs on waitfor delay 4 (4012ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (431ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (371ms)
    √ bulk insert/update/select int column of signed batchSize 10 (446ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (512ms)
    √ employee insert/select with non primary key (116ms)
    √ employee insert - update a single column (112ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (454ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (357ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (740ms)
    √ call proc that has 2 output string params + return code (39ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (478ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (579ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  230 passing (30s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (79ms)
    √ non dbo schema use tvp simple test type select test (38ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (112ms)
    √ employee use tm to get a table value type representing table and create that user table type (554ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3012ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (110ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (153ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (442ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (75ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1997ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4016ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (114ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (443ms)
    √ bulk insert/update/select int column of signed batchSize 10 (400ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (480ms)
    √ employee insert/select with non primary key (131ms)
    √ employee insert - update a single column (105ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (38ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (652ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2040ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (465ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (638ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (102ms)
    √ non dbo schema use tvp simple test type select test (45ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (90ms)
    √ employee use tm to get a table value type representing table and create that user table type (597ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (155ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (469ms)
    √ insert string 60 x 1024 in varchar(max) (38ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (105ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2014ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (271ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (793ms)
    √ bulk insert/update/select int column of signed batchSize 10 (724ms)
    √ bulk insert/select varbinary column batchSize 1 (73ms)
    √ bulk insert/select varbinary column batchSize 10 (56ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (60ms)
    √ employee complex json object array bulk operations (785ms)
    √ employee insert/select with non primary key (239ms)
    √ employee insert - update a single column (186ms)
    √ bulk insert/update/select bit strict column 10 (44ms)
    √ bulk insert/select bit strict column batchSize 1 (54ms)
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1 (52ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1 (39ms)
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (46ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (495ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (39ms)
    √ bulk insert/select varchar column batchSize 1 (54ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (47ms)
    √ bulk insert simple multi-column object in batches 10 (488ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (40ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (879ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2027ms)
    √ call proc that returns length of input string and decribes itself in results (67ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (562ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (47ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (821ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (51ms)
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (121ms)
    √ non dbo schema use tvp simple test type select test (58ms)
    √ use tvp simple test type select test (39ms)
    √ use tvp simple test type insert test (74ms)
    √ use tvp to select from table type complex object Employee type (604ms)
    √ employee use tm to get a table value type representing table and create that user table type (705ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (44ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3013ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (132ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests (54ms)
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (191ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (55ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (73ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (122ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (40ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (51ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (71ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (82ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (663ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (100ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1992ms)
    √ test timeout 10 secs on waitfor delay 2 (2007ms)
    √ test timeout 0 secs on waitfor delay 4 (4006ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (135ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (526ms)
    √ bulk insert/update/select int column of signed batchSize 10 (561ms)
    √ bulk insert/select varbinary column batchSize 1 (45ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (38ms)
    √ employee complex json object array bulk operations (618ms)
    √ employee insert/select with non primary key (196ms)
    √ employee insert - update a single column (628ms)
    √ bulk insert/update/select bit strict column 10 (539ms)
    √ bulk insert/select bit strict column batchSize 1 (38ms)
    √ bulk insert/select bit strict column 10 (47ms)
    √ bulk insert/select datetime column batchSize 1 (42ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (88ms)
    √ bulk insert/select bit column batchSize 1 (41ms)
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (44ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (48ms)
    √ bulk insert/select varchar column batchSize 1 (58ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (39ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (43ms)
    √ bulk insert simple multi-column object in batches 10 (496ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (49ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (1021ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2039ms)
    √ call proc that returns length of input string and decribes itself in results (39ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (736ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (41ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (716ms)
    √ use prepared statement twice with different params. (39ms)

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (74ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (90ms)
    √ non dbo schema use tvp simple test type select test (51ms)
    √ use tvp simple test type select test (41ms)
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (155ms)
    √ employee use tm to get a table value type representing table and create that user table type (276ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all (51ms)
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3025ms)
    √ cancel single waitfor using notifier - expect Operation canceled (46ms)
    √ nested cancel - expect Operation canceled on both (101ms)
    √ cancel single query - expect Operation canceled (73ms)
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (121ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (154ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit (47ms)
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (821ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (39ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (71ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (49ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (51ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (63ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (50ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (55ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (51ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (53ms)
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (62ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text (38ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (548ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (41ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter (203ms)
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (107ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (45ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (1995ms)
    √ test timeout 10 secs on waitfor delay 2 (2014ms)
    √ test timeout 0 secs on waitfor delay 4 (4013ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (91ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (384ms)
    √ bulk insert/update/select int column of signed batchSize 10 (399ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (507ms)
    √ employee insert/select with non primary key (131ms)
    √ employee insert - update a single column (474ms)
    √ bulk insert/update/select bit strict column 10 (507ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (72ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10 (432ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (61ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (841ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2029ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (457ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (644ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (45ms)
    √ test timezone components of datetimeoffset


  230 passing (35s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (72ms)
    √ non dbo schema use tvp simple test type select test (48ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (126ms)
    √ employee use tm to get a table value type representing table and create that user table type (110ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3016ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (120ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (157ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (425ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (69ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2014ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4014ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (670ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (361ms)
    √ bulk insert/update/select int column of signed batchSize 10 (340ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (455ms)
    √ employee insert/select with non primary key (119ms)
    √ employee insert - update a single column (443ms)
    √ bulk insert/update/select bit strict column 10 (363ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (47ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (363ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (40ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (647ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2031ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (484ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (560ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (30s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (103ms)
    √ non dbo schema use tvp simple test type select test (42ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (413ms)
    √ employee use tm to get a table value type representing table and create that user table type (102ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3008ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (163ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (65ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error (41ms)
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (229ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date (44ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (52ms)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000) (53ms)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (569ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error (38ms)
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter (39ms)
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter (117ms)
    √ insert bigint as parameter (106ms)
    √ insert largest bigint as parameter (73ms)
    √ insert decimal as parameter (58ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field (60ms)
    √ insert large string into max column (57ms)
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field (63ms)
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (155ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2006ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (121ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (562ms)
    √ bulk insert/update/select int column of signed batchSize 10 (579ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (56ms)
    √ employee complex json object array bulk operations (1228ms)
    √ employee insert/select with non primary key (254ms)
    √ employee insert - update a single column (756ms)
    √ bulk insert/update/select bit strict column 10 (654ms)
    √ bulk insert/select bit strict column batchSize 1 (56ms)
    √ bulk insert/select bit strict column 10 (40ms)
    √ bulk insert/select datetime column batchSize 1 (51ms)
    √ bulk insert/select datetime column batchSize 10 (41ms)
    √ bulk insert/select int column of signed batchSize 1 (144ms)
    √ bulk insert/select int column of signed batchSize 10 (48ms)
    √ bulk insert/select int column of unsigned batchSize 1 (49ms)
    √ bulk insert/select int column of unsigned batchSize 10 (46ms)
    √ bulk insert/select/update int column of unsigned batchSize 10 (43ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (38ms)
    √ bulk insert/update/select bit column 10 (44ms)
    √ bulk insert/select decimal column batchSize 1 (45ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (46ms)
    √ bulk insert/select varchar column batchSize 1 (163ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10 (64ms)
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (39ms)
    √ bulk insert simple multi-column object in batches 10 (438ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (946ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2025ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (567ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (718ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (47ms)
    √ test timezone components of datetimeoffset


  230 passing (37s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (138ms)
    √ non dbo schema use tvp simple test type select test (163ms)
    √ use tvp simple test type select test (96ms)
    √ use tvp simple test type insert test (53ms)
    √ use tvp to select from table type complex object Employee type (1136ms)
    √ employee use tm to get a table value type representing table and create that user table type (179ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (39ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (164ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text (182ms)

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100) (212ms)
    √ insert string 500 in nvarchar(1000) (171ms)
    √ insert string 4 x 1024 in varchar(8000) (64ms)
    √ insert string 6 x 1024 in varchar(8000) (219ms)
    √ insert string 30 x 1024 in varchar(max) (58ms)
    √ insert string 2 x 1024 * 1024 in varchar(max) (806ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (88ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (68ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (383ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (408ms)
    √ bulk insert/update/select int column of signed batchSize 10 (450ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (412ms)
    √ employee insert/select with non primary key (130ms)
    √ employee insert - update a single column (116ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (363ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (40ms)
    √ bulk insert simple multi-column object in batches 10 (339ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent (39ms)
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (664ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (687ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (48ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (879ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (34s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (103ms)
    √ non dbo schema use tvp simple test type select test (47ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (114ms)
    √ employee use tm to get a table value type representing table and create that user table type (484ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (104ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (152ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (496ms)
    √ insert string 60 x 1024 in varchar(max) (40ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (110ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (518ms)
    √ bulk insert/update/select int column of signed batchSize 10 (359ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (371ms)
    √ employee insert/select with non primary key (112ms)
    √ employee insert - update a single column (123ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (718ms)
    √ call proc that has 2 output string params + return code (46ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2030ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (450ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (568ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (45ms)
    √ test timezone components of datetimeoffset


  230 passing (28s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (101ms)
    √ non dbo schema use tvp simple test type select test (47ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (450ms)
    √ employee use tm to get a table value type representing table and create that user table type (115ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (49ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (105ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (41ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (180ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (374ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (338ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (332ms)
    √ bulk insert/update/select int column of signed batchSize 10 (318ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (402ms)
    √ employee insert/select with non primary key (118ms)
    √ employee insert - update a single column (109ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (316ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (38ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (323ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (653ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results (56ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (449ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (39ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (625ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (100ms)
    √ non dbo schema use tvp simple test type select test (52ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (99ms)
    √ employee use tm to get a table value type representing table and create that user table type (470ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (105ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (169ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (374ms)
    √ insert string 60 x 1024 in varchar(max) (40ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (60ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (350ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (361ms)
    √ bulk insert/update/select int column of signed batchSize 10 (311ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (393ms)
    √ employee insert/select with non primary key (420ms)
    √ employee insert - update a single column (113ms)
    √ bulk insert/update/select bit strict column 10 (331ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (288ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (582ms)
    √ call proc that has 2 output string params + return code (49ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2023ms)
    √ call proc that returns length of input string and decribes itself in results (60ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (451ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (612ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (71ms)
    √ non dbo schema use tvp simple test type select test (48ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (91ms)
    √ employee use tm to get a table value type representing table and create that user table type (111ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (104ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (172ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (379ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (59ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (81ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (376ms)
    √ bulk insert/update/select int column of signed batchSize 10 (312ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (393ms)
    √ employee insert/select with non primary key (138ms)
    √ employee insert - update a single column (409ms)
    √ bulk insert/update/select bit strict column 10 (321ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (302ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (38ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (321ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (669ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (427ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (631ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (38ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (46ms)
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (102ms)
    √ non dbo schema use tvp simple test type select test (48ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (432ms)
    √ employee use tm to get a table value type representing table and create that user table type (110ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (38ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (142ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (377ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly (52ms)
    √ object_name query  (74ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (80ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (350ms)
    √ bulk insert/update/select int column of signed batchSize 10 (301ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (382ms)
    √ employee insert/select with non primary key (437ms)
    √ employee insert - update a single column (114ms)
    √ bulk insert/update/select bit strict column 10 (296ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (325ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (656ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2022ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (457ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (587ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (43ms)
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (107ms)
    √ non dbo schema use tvp simple test type select test (50ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (114ms)
    √ employee use tm to get a table value type representing table and create that user table type (130ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (106ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (186ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (377ms)
    √ insert string 60 x 1024 in varchar(max) (40ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (66ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (63ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (342ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (372ms)
    √ bulk insert/update/select int column of signed batchSize 10 (329ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (364ms)
    √ employee insert/select with non primary key (113ms)
    √ employee insert - update a single column (404ms)
    √ bulk insert/update/select bit strict column 10 (319ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (39ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (314ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (653ms)
    √ call proc that has 2 output string params + return code (45ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2020ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (442ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (587ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (99ms)
    √ non dbo schema use tvp simple test type select test (46ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (101ms)
    √ employee use tm to get a table value type representing table and create that user table type (122ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (182ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (378ms)
    √ insert string 60 x 1024 in varchar(max) (40ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (76ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (46ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (346ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (365ms)
    √ bulk insert/update/select int column of signed batchSize 10 (318ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (395ms)
    √ employee insert/select with non primary key (115ms)
    √ employee insert - update a single column (108ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (640ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2023ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (438ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (624ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  230 passing (28s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (100ms)
    √ non dbo schema use tvp simple test type select test (46ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (478ms)
    √ employee use tm to get a table value type representing table and create that user table type (402ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (50ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (105ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (134ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (389ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (79ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (73ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (329ms)
    √ bulk insert/update/select int column of signed batchSize 10 (325ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (395ms)
    √ employee insert/select with non primary key (129ms)
    √ employee insert - update a single column (110ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (298ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (324ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (571ms)
    √ call proc that has 2 output string params + return code (49ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2024ms)
    √ call proc that returns length of input string and decribes itself in results (57ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (421ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (549ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (99ms)
    √ non dbo schema use tvp simple test type select test (55ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (87ms)
    √ employee use tm to get a table value type representing table and create that user table type (100ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (50ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3004ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (108ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (142ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (372ms)
    √ insert string 60 x 1024 in varchar(max) (38ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2005ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (332ms)
    √ bulk insert/update/select int column of signed batchSize 10 (323ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (391ms)
    √ employee insert/select with non primary key (113ms)
    √ employee insert - update a single column (114ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (564ms)
    √ call proc that has 2 output string params + return code (47ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2021ms)
    √ call proc that returns length of input string and decribes itself in results (54ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (455ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (678ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  230 passing (28s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (106ms)
    √ non dbo schema use tvp simple test type select test (44ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (95ms)
    √ employee use tm to get a table value type representing table and create that user table type (447ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (106ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (131ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (391ms)
    √ insert string 60 x 1024 in varchar(max) (41ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (68ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (78ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (309ms)
    √ bulk insert/update/select int column of signed batchSize 10 (327ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (367ms)
    √ employee insert/select with non primary key (118ms)
    √ employee insert - update a single column (112ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (318ms)
    √ bulk insert/select decimal column batchSize 10 (312ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (312ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (575ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2025ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (462ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (612ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (28s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (89ms)
    √ non dbo schema use tvp simple test type select test (42ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (510ms)
    √ employee use tm to get a table value type representing table and create that user table type (141ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (104ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (140ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (368ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (75ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (49ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2003ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (81ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (354ms)
    √ bulk insert/update/select int column of signed batchSize 10 (334ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (386ms)
    √ employee insert/select with non primary key (114ms)
    √ employee insert - update a single column (412ms)
    √ bulk insert/update/select bit strict column 10 (321ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10 (305ms)
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (316ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (639ms)
    √ call proc that has 2 output string params + return code (46ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2020ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (409ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (525ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (46ms)
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (116ms)
    √ non dbo schema use tvp simple test type select test (52ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (90ms)
    √ employee use tm to get a table value type representing table and create that user table type (406ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (106ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (39ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (140ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (370ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (84ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (369ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (362ms)
    √ bulk insert/update/select int column of signed batchSize 10 (341ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (384ms)
    √ employee insert/select with non primary key (111ms)
    √ employee insert - update a single column (115ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (554ms)
    √ call proc that has 2 output string params + return code (47ms)
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2025ms)
    √ call proc that returns length of input string and decribes itself in results (53ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (425ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (632ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (28s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (100ms)
    √ non dbo schema use tvp simple test type select test (48ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (111ms)
    √ employee use tm to get a table value type representing table and create that user table type (137ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (49ms)
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (106ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (141ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (373ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (82ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (349ms)
    √ bulk insert/update/select int column of signed batchSize 10 (314ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (355ms)
    √ employee insert/select with non primary key (118ms)
    √ employee insert - update a single column (426ms)
    √ bulk insert/update/select bit strict column 10 (326ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (291ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (294ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (604ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (430ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (538ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (28s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (102ms)
    √ non dbo schema use tvp simple test type select test (46ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (513ms)
    √ employee use tm to get a table value type representing table and create that user table type (425ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param. (43ms)
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (133ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (386ms)
    √ insert string 60 x 1024 in varchar(max)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (39ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (61ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4004ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (431ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (335ms)
    √ bulk insert/update/select int column of signed batchSize 10 (315ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (501ms)
    √ employee insert/select with non primary key (118ms)
    √ employee insert - update a single column (122ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (565ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2020ms)
    √ call proc that returns length of input string and decribes itself in results (58ms)
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (432ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (534ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (28s)

0
"next " 
DEBUG mode filename ..\build\Debug\sqlserverv8.node
DEBUG loading from native C:\Users\Stephen\dev\js\v8\node_modules\msnodesqlv8\build\Debug\sqlserverv8.node
{ _: [],
  t:
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (71ms)
    √ non dbo schema use tvp simple test type select test (46ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (108ms)
    √ employee use tm to get a table value type representing table and create that user table type (432ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a call to proc that waits for delay of input param.
    √ cancel a prepared call that waits

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (136ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using streaming - ensure no fragmentation
    √ mssql set @str=?;DECLARE @sql NVARCHAR(MAX) = @str; SELECT @s AS s
    √ insert string 100 in nchar(100)
    √ insert string 500 in nvarchar(1000)
    √ insert string 4 x 1024 in varchar(8000)
    √ insert string 6 x 1024 in varchar(8000)
    √ insert string 30 x 1024 in varchar(max)
    √ insert string 2 x 1024 * 1024 in varchar(max) (374ms)
    √ insert string 60 x 1024 in varchar(max) (39ms)
    √ verify empty string is sent as empty string, not null
    √ verify that non-Buffer object parameter returns an error
    √ verify Buffer objects as input parameters
    √ insert min and max number values
    √ select a long string using callback
    √ select a long buffer using callback
    √ verify buffer longer than column causes error
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ verify empty results retrieved properly
    √ object_name query  (63ms)
    √ select nulls union all nulls
    √ test function parameter validation
    √ test retrieving a LOB string larger than max string size
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (47ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2003ms)
    √ test timeout 10 secs on waitfor delay 2 (2004ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (85ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (384ms)
    √ bulk insert/update/select int column of signed batchSize 10 (371ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (388ms)
    √ employee insert/select with non primary key (115ms)
    √ employee insert - update a single column (425ms)
    √ bulk insert/update/select bit strict column 10 (336ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (328ms)

  sproc
    √ get proc and call multiple times synchronously with changing params i.e. prove each call is independent
    √ get proc and call multiple times asynchronously with changing params i.e. prove each call is independent (583ms)
    √ call proc that has 2 output string params + return code
    √ get proc and call  - should not error
    √ stream call proc no callback
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2020ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared to reserve and read multiple rows. (443ms)
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (654ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind BigInt
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  230 passing (29s)

0
"next " 
